<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SCCK - Système de Gestion Complet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .fade-in { animation: fadeIn 0.3s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .slide-in { animation: slideIn 0.3s ease-out; }
        @keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
        .card-hover { transition: all 0.3s ease; }
        .card-hover:hover { transform: translateY(-2px); box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .success-bg { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
        .warning-bg { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }
        .info-bg { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); }
        .loading-spinner { animation: spin 1s linear infinite; }
        @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
        .print-only { display: none; }
        @media print { 
            .no-print { display: none !important; }
            .print-only { display: block !important; }
            body { background: white !important; }
        }
        .offline-indicator { 
            position: fixed; 
            top: 0; 
            left: 0; 
            right: 0; 
            background: #ef4444; 
            color: white; 
            text-align: center; 
            padding: 8px; 
            z-index: 9999; 
            display: none; 
        }
        .sync-indicator {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #10b981;
            color: white;
            padding: 8px 16px;
            rounded: 8px;
            display: none;
            z-index: 1000;
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Offline Indicator -->
    <div id="offlineIndicator" class="offline-indicator">
        <i data-lucide="wifi-off" class="w-4 h-4 inline mr-2"></i>
        Mode hors ligne - Les données seront synchronisées lors de la reconnexion
    </div>

    <!-- Sync Indicator -->
    <div id="syncIndicator" class="sync-indicator rounded-lg">
        <i data-lucide="check-circle" class="w-4 h-4 inline mr-2"></i>
        Données synchronisées
    </div>

    <!-- Loading Screen -->
    <div id="loadingScreen" class="fixed inset-0 bg-white z-50 flex items-center justify-center">
        <div class="text-center">
            <div class="loading-spinner w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full mx-auto mb-4"></div>
            <h2 class="text-xl font-semibold text-gray-900 mb-2">SCCK Management</h2>
            <p class="text-gray-600">Chargement du système...</p>
        </div>
    </div>

    <!-- Login Screen -->
    <div id="loginScreen" class="fixed inset-0 bg-gradient-to-br from-blue-600 to-purple-700 z-40 flex items-center justify-center hidden">
        <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md mx-4">
            <div class="text-center mb-8">
                <h1 class="text-2xl font-bold text-gray-900 mb-2">SCCK Management</h1>
                <p class="text-gray-600">Système de Gestion Coopérative</p>
            </div>
            <form id="loginForm" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    <input type="email" id="loginEmail" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="admin@scck.com">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Mot de passe</label>
                    <input type="password" id="loginPassword" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="••••••••">
                </div>
                <div class="flex items-center justify-between">
                    <label class="flex items-center">
                        <input type="checkbox" id="rememberMe" class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                        <span class="ml-2 text-sm text-gray-600">Se souvenir de moi</span>
                    </label>
                    <button type="button" class="text-sm text-blue-600 hover:text-blue-800">Mot de passe oublié?</button>
                </div>
                <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md font-medium transition-colors">
                    Se connecter
                </button>
            </form>
            <div class="mt-6 text-center">
                <p class="text-xs text-gray-500">Version 2.1.0 - © 2024 SCCK Management</p>
            </div>
        </div>
    </div>

    <!-- Navigation -->
    <nav class="gradient-bg text-white shadow-lg no-print">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center space-x-2 sm:space-x-4">
                    <div class="flex-shrink-0">
                        <h1 class="text-lg sm:text-xl font-bold">SCCK Management</h1>
                    </div>
                    <div class="hidden lg:block">
                        <div class="ml-6 xl:ml-10 flex items-baseline space-x-2 xl:space-x-4">
                            <button onclick="showModule('dashboard')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Tableau de Bord
                            </button>
                            <button onclick="showModule('producers')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Producteurs
                            </button>
                            <button onclick="showModule('collection')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Collecte
                            </button>
                            <button onclick="showModule('distribution')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Distribution
                            </button>
                            <button onclick="showModule('warehouse')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Centre d'Achat
                            </button>
                            <button onclick="showModule('admin')" class="nav-btn px-2 xl:px-3 py-2 rounded-md text-xs xl:text-sm font-medium hover:bg-white hover:bg-opacity-20 transition-colors">
                                Administration
                            </button>
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-2 sm:space-x-4">
                    <span class="hidden sm:block text-xs sm:text-sm" id="userInfo">Superviseur - Zone Nord</span>
                    <button onclick="toggleMobileMenu()" class="lg:hidden p-2 rounded-md hover:bg-white hover:bg-opacity-20 transition-colors">
                        <i data-lucide="menu" class="w-5 h-5"></i>
                    </button>
                    <button onclick="logout()" class="hidden sm:block bg-white bg-opacity-20 hover:bg-opacity-30 px-2 sm:px-3 py-2 rounded-md text-xs sm:text-sm font-medium transition-colors">
                        Déconnexion
                    </button>
                </div>
            </div>
        </div>
        <!-- Mobile menu -->
        <div id="mobileMenu" class="lg:hidden hidden">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-white border-opacity-20">
                <button onclick="showModule('dashboard')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Tableau de Bord</button>
                <button onclick="showModule('producers')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Producteurs</button>
                <button onclick="showModule('collection')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Collecte</button>
                <button onclick="showModule('distribution')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Distribution</button>
                <button onclick="showModule('warehouse')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Centre d'Achat</button>
                <button onclick="showModule('admin')" class="nav-btn-mobile block px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20 w-full text-left">Administration</button>
                <div class="border-t border-white border-opacity-20 pt-2 mt-2">
                    <div class="px-3 py-2 text-sm text-white opacity-75" id="mobileUserInfo">Superviseur - Zone Nord</div>
                    <button onclick="logout()" class="block w-full text-left px-3 py-2 rounded-md text-base font-medium hover:bg-white hover:bg-opacity-20">
                        Déconnexion
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto py-3 sm:py-6 px-2 sm:px-4 lg:px-6 xl:px-8">
        <!-- Dashboard Module -->
        <div id="dashboard-module" class="module fade-in">
            <div class="mb-4 sm:mb-6 lg:mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div class="mb-3 sm:mb-0">
                    <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-1 sm:mb-2">Tableau de Bord</h2>
                    <p class="text-sm sm:text-base text-gray-600">Vue d'ensemble des activités SCCK</p>
                </div>
                <div class="flex space-x-2">
                    <button onclick="refreshDashboard()" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors">
                        <i data-lucide="refresh-cw" class="w-4 h-4 inline mr-2"></i>
                        Actualiser
                    </button>
                    <button onclick="exportDashboard()" class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors">
                        <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                        Exporter
                    </button>
                </div>
            </div>

            <!-- Date Range Filter -->
            <div class="bg-white rounded-lg shadow-md p-4 mb-6">
                <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
                    <div class="flex items-center space-x-2">
                        <i data-lucide="calendar" class="w-4 h-4 text-gray-500"></i>
                        <span class="text-sm font-medium text-gray-700">Période:</span>
                    </div>
                    <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                        <input type="date" id="dashboardStartDate" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <span class="text-gray-500 self-center">à</span>
                        <input type="date" id="dashboardEndDate" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <button onclick="updateDashboardPeriod()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
                            Appliquer
                        </button>
                    </div>
                </div>
            </div>

            <!-- KPI Cards -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-4 sm:mb-6 lg:mb-8">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <i data-lucide="users" class="w-3 h-3 sm:w-5 sm:h-5 text-blue-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Producteurs Actifs</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalProducers">247</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-green-100 rounded-full flex items-center justify-center">
                                <i data-lucide="package" class="w-3 h-3 sm:w-5 sm:h-5 text-green-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Collecte (kg)</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalCollection">12,450</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                <i data-lucide="truck" class="w-3 h-3 sm:w-5 sm:h-5 text-yellow-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Distributions</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalDistributions">89</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                <i data-lucide="dollar-sign" class="w-3 h-3 sm:w-5 sm:h-5 text-purple-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Revenus (FCFA)</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalRevenue">8,970,000</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Access Menu -->
            <div class="mb-4 sm:mb-6 lg:mb-8">
                <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-3 sm:mb-4">Accès Rapide aux Modules</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-3 sm:gap-4">
                    <!-- Producers Module -->
                    <div onclick="showModule('producers')" class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover cursor-pointer border-l-4 border-blue-500 hover:border-blue-600 transition-all">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 sm:w-10 sm:h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                    <i data-lucide="users" class="w-4 h-4 sm:w-5 sm:h-5 text-blue-600"></i>
                                </div>
                            </div>
                            <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                <p class="text-sm sm:text-base font-semibold text-gray-900">Producteurs</p>
                                <p class="text-xs sm:text-sm text-gray-500">Gestion des producteurs</p>
                            </div>
                        </div>
                        <div class="mt-3 sm:mt-4">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <span class="text-gray-600">Total actifs</span>
                                <span class="font-semibold text-blue-600">247</span>
                            </div>
                        </div>
                    </div>

                    <!-- Collection Module -->
                    <div onclick="showModule('collection')" class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover cursor-pointer border-l-4 border-green-500 hover:border-green-600 transition-all">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 sm:w-10 sm:h-10 bg-green-100 rounded-full flex items-center justify-center">
                                    <i data-lucide="package" class="w-4 h-4 sm:w-5 sm:h-5 text-green-600"></i>
                                </div>
                            </div>
                            <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                <p class="text-sm sm:text-base font-semibold text-gray-900">Collecte</p>
                                <p class="text-xs sm:text-sm text-gray-500">Enregistrement collectes</p>
                            </div>
                        </div>
                        <div class="mt-3 sm:mt-4">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <span class="text-gray-600">Ce mois</span>
                                <span class="font-semibold text-green-600">12,450 kg</span>
                            </div>
                        </div>
                    </div>

                    <!-- Distribution Module -->
                    <div onclick="showModule('distribution')" class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover cursor-pointer border-l-4 border-purple-500 hover:border-purple-600 transition-all">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 sm:w-10 sm:h-10 bg-purple-100 rounded-full flex items-center justify-center">
                                    <i data-lucide="truck" class="w-4 h-4 sm:w-5 sm:h-5 text-purple-600"></i>
                                </div>
                            </div>
                            <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                <p class="text-sm sm:text-base font-semibold text-gray-900">Distribution</p>
                                <p class="text-xs sm:text-sm text-gray-500">Distribution intrants</p>
                            </div>
                        </div>
                        <div class="mt-3 sm:mt-4">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <span class="text-gray-600">Total</span>
                                <span class="font-semibold text-purple-600">89</span>
                            </div>
                        </div>
                    </div>

                    <!-- Warehouse Module -->
                    <div onclick="showModule('warehouse')" class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover cursor-pointer border-l-4 border-orange-500 hover:border-orange-600 transition-all">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 sm:w-10 sm:h-10 bg-orange-100 rounded-full flex items-center justify-center">
                                    <i data-lucide="warehouse" class="w-4 h-4 sm:w-5 sm:h-5 text-orange-600"></i>
                                </div>
                            </div>
                            <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                <p class="text-sm sm:text-base font-semibold text-gray-900">Centre d'Achat</p>
                                <p class="text-xs sm:text-sm text-gray-500">Gestion stocks</p>
                            </div>
                        </div>
                        <div class="mt-3 sm:mt-4">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <span class="text-gray-600">Articles</span>
                                <span class="font-semibold text-orange-600">12</span>
                            </div>
                        </div>
                    </div>

                    <!-- Admin Module -->
                    <div onclick="showModule('admin')" class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover cursor-pointer border-l-4 border-indigo-500 hover:border-indigo-600 transition-all sm:col-span-2 lg:col-span-1">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 sm:w-10 sm:h-10 bg-indigo-100 rounded-full flex items-center justify-center">
                                    <i data-lucide="settings" class="w-4 h-4 sm:w-5 sm:h-5 text-indigo-600"></i>
                                </div>
                            </div>
                            <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                                <p class="text-sm sm:text-base font-semibold text-gray-900">Administration</p>
                                <p class="text-xs sm:text-sm text-gray-500">Gestion système</p>
                            </div>
                        </div>
                        <div class="mt-3 sm:mt-4">
                            <div class="flex items-center justify-between text-xs sm:text-sm">
                                <span class="text-gray-600">Utilisateurs</span>
                                <span class="font-semibold text-indigo-600">3</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts and Analytics -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 mb-4 sm:mb-6 lg:mb-8">
                <!-- Collection Trends Chart -->
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Évolution des Collectes</h3>
                    <div class="h-64">
                        <canvas id="collectionChart"></canvas>
                    </div>
                </div>

                <!-- Zone Performance Chart -->
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Performance par Zone</h3>
                    <div class="h-64">
                        <canvas id="zoneChart"></canvas>
                    </div>
                </div>

                <!-- Financial Overview Chart -->
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Aperçu Financier</h3>
                    <div class="h-64">
                        <canvas id="financialChart"></canvas>
                    </div>
                </div>

                <!-- Producer Growth Chart -->
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Croissance des Producteurs</h3>
                    <div class="h-64">
                        <canvas id="producerChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Recent Activities -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 mb-4 sm:mb-6 lg:mb-8">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Activités Récentes</h3>
                    <div class="space-y-3 sm:space-y-4" id="recentActivities">
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-green-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Collecte de 150kg - Producteur PROD001</span>
                                <span class="text-xs text-gray-400">Il y a 2h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-blue-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Nouveau producteur enregistré - PROD248</span>
                                <span class="text-xs text-gray-400">Il y a 4h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Distribution d'intrants - 50kg d'engrais</span>
                                <span class="text-xs text-gray-400">Il y a 6h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Achat d'intrants - Engrais NPK 1000kg</span>
                                <span class="text-xs text-gray-400">Il y a 8h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-indigo-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Nouveau fournisseur ajouté - Agro-Inputs</span>
                                <span class="text-xs text-gray-400">Il y a 1 jour</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Collecte par Zone</h3>
                    <div class="space-y-3" id="collectionByZone">
                        <div class="flex justify-between items-center">
                            <span class="text-xs sm:text-sm text-gray-600">Zone Nord</span>
                            <span class="text-xs sm:text-sm font-semibold">4,200 kg</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-blue-600 h-2 rounded-full" style="width: 70%"></div>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-xs sm:text-sm text-gray-600">Zone Sud</span>
                            <span class="text-xs sm:text-sm font-semibold">3,800 kg</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-green-600 h-2 rounded-full" style="width: 63%"></div>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-xs sm:text-sm text-gray-600">Zone Est</span>
                            <span class="text-xs sm:text-sm font-semibold">2,950 kg</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-yellow-600 h-2 rounded-full" style="width: 49%"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Actions Rapides</h3>
                <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3 sm:gap-4">
                    <button onclick="showProducerForm()" class="flex flex-col items-center p-3 sm:p-4 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors">
                        <i data-lucide="user-plus" class="w-6 h-6 sm:w-8 sm:h-8 text-blue-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-blue-700">Nouveau Producteur</span>
                    </button>
                    
                    <button onclick="showCollectionForm()" class="flex flex-col items-center p-3 sm:p-4 bg-green-50 hover:bg-green-100 rounded-lg transition-colors">
                        <i data-lucide="package-plus" class="w-6 h-6 sm:w-8 sm:h-8 text-green-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-green-700">Nouvelle Collecte</span>
                    </button>
                    
                    <button onclick="showDistributionForm()" class="flex flex-col items-center p-3 sm:p-4 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors">
                        <i data-lucide="truck" class="w-6 h-6 sm:w-8 sm:h-8 text-purple-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-purple-700">Nouvelle Distribution</span>
                    </button>
                    
                    <button onclick="showPurchaseForm()" class="flex flex-col items-center p-3 sm:p-4 bg-orange-50 hover:bg-orange-100 rounded-lg transition-colors">
                        <i data-lucide="shopping-cart" class="w-6 h-6 sm:w-8 sm:h-8 text-orange-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-orange-700">Nouvel Achat</span>
                    </button>
                    
                    <button onclick="showStockForm()" class="flex flex-col items-center p-3 sm:p-4 bg-teal-50 hover:bg-teal-100 rounded-lg transition-colors">
                        <i data-lucide="package" class="w-6 h-6 sm:w-8 sm:h-8 text-teal-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-teal-700">Ajuster Stock</span>
                    </button>
                    
                    <button onclick="showUserForm()" class="flex flex-col items-center p-3 sm:p-4 bg-indigo-50 hover:bg-indigo-100 rounded-lg transition-colors">
                        <i data-lucide="user-plus" class="w-6 h-6 sm:w-8 sm:h-8 text-indigo-600 mb-2"></i>
                        <span class="text-xs sm:text-sm font-medium text-indigo-700">Nouvel Utilisateur</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Producers Module -->
        <div id="producers-module" class="module hidden">
            <div class="mb-4 sm:mb-6 lg:mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div class="mb-3 sm:mb-0">
                    <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-1 sm:mb-2">Gestion des Producteurs</h2>
                    <p class="text-sm sm:text-base text-gray-600">Recensement et suivi des producteurs</p>
                </div>
                <button onclick="showProducerForm()" class="w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm sm:text-base font-medium transition-colors">
                    <i data-lucide="plus" class="w-4 h-4 inline mr-2"></i>
                    Nouveau Producteur
                </button>
            </div>

            <!-- Search and Filters -->
            <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 mb-4 sm:mb-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                    <div>
                        <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Rechercher</label>
                        <input type="text" id="producerSearch" placeholder="Nom, matricule..." class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Zone</label>
                        <select id="zoneFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">Toutes les zones</option>
                            <option value="nord">Zone Nord</option>
                            <option value="sud">Zone Sud</option>
                            <option value="est">Zone Est</option>
                        </select>
                    </div>
                    <div class="sm:col-span-2 lg:col-span-1">
                        <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Statut</label>
                        <select id="statusFilter" class="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">Tous les statuts</option>
                            <option value="actif">Actif</option>
                            <option value="inactif">Inactif</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Producers List -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producteur</th>
                                <th class="hidden sm:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Matricule</th>
                                <th class="hidden md:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Zone</th>
                                <th class="hidden lg:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Téléphone</th>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="producersTableBody" class="bg-white divide-y divide-gray-200">
                            <!-- Producer rows will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Collection Module -->
        <div id="collection-module" class="module hidden">
            <div class="mb-4 sm:mb-6 lg:mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div class="mb-3 sm:mb-0">
                    <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-1 sm:mb-2">Gestion des Collectes</h2>
                    <p class="text-sm sm:text-base text-gray-600">Enregistrement et suivi des collectes</p>
                </div>
                <button onclick="showCollectionForm()" class="w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm sm:text-base font-medium transition-colors">
                    <i data-lucide="plus" class="w-4 h-4 inline mr-2"></i>
                    Nouvelle Collecte
                </button>
            </div>

            <!-- Collection Summary -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 lg:gap-6 mb-4 sm:mb-6">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-green-100 rounded-full flex items-center justify-center">
                                <i data-lucide="package" class="w-3 h-3 sm:w-5 sm:h-5 text-green-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Collecte Aujourd'hui</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900">850 kg</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <i data-lucide="calendar" class="w-3 h-3 sm:w-5 sm:h-5 text-blue-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Collecte ce Mois</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900">12,450 kg</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 sm:col-span-2 lg:col-span-1">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                <i data-lucide="dollar-sign" class="w-3 h-3 sm:w-5 sm:h-5 text-yellow-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Paiements Effectués</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900">8,970,000 F</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Collections List -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900">Collectes Récentes</h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producteur</th>
                                <th class="hidden sm:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantité (kg)</th>
                                <th class="hidden md:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix/kg</th>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                <th class="hidden lg:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="collectionsTableBody" class="bg-white divide-y divide-gray-200">
                            <!-- Collection rows will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Distribution Module -->
        <div id="distribution-module" class="module hidden">
            <div class="mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div>
                    <h2 class="text-3xl font-bold text-gray-900 mb-2">Gestion des Distributions</h2>
                    <p class="text-gray-600">Distribution d'intrants et gestion des crédits</p>
                </div>
                <button onclick="showDistributionForm()" class="mt-4 sm:mt-0 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    <i data-lucide="plus" class="w-4 h-4 inline mr-2"></i>
                    Nouvelle Distribution
                </button>
            </div>

            <!-- Distribution Summary -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center">
                                <i data-lucide="truck" class="w-5 h-5 text-purple-600"></i>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-500">Distributions</p>
                            <p class="text-2xl font-semibold text-gray-900">89</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                                <i data-lucide="check-circle" class="w-5 h-5 text-green-600"></i>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-500">Remboursés</p>
                            <p class="text-2xl font-semibold text-gray-900">67</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center">
                                <i data-lucide="clock" class="w-5 h-5 text-yellow-600"></i>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-500">En Attente</p>
                            <p class="text-2xl font-semibold text-gray-900">22</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                                <i data-lucide="dollar-sign" class="w-5 h-5 text-red-600"></i>
                            </div>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-500">Crédit Total</p>
                            <p class="text-2xl font-semibold text-gray-900">2,340,000 F</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Distributions List -->
            <div class="bg-white rounded-lg shadow-md overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Distributions Récentes</h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producteur</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Intrant</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantité</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valeur</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="distributionsTableBody" class="bg-white divide-y divide-gray-200">
                            <!-- Distribution rows will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Warehouse Module -->
        <div id="warehouse-module" class="module hidden">
            <div class="mb-4 sm:mb-6 lg:mb-8 flex flex-col sm:flex-row justify-between items-start sm:items-center">
                <div class="mb-3 sm:mb-0">
                    <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-1 sm:mb-2">Centre d'Achat et Magasin</h2>
                    <p class="text-sm sm:text-base text-gray-600">Gestion des stocks et achats d'intrants</p>
                </div>
                <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 w-full sm:w-auto">
                    <button onclick="showPurchaseForm()" class="bg-orange-600 hover:bg-orange-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm sm:text-base font-medium transition-colors">
                        <i data-lucide="shopping-cart" class="w-4 h-4 inline mr-2"></i>
                        Nouvel Achat
                    </button>
                    <button onclick="showStockForm()" class="bg-teal-600 hover:bg-teal-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm sm:text-base font-medium transition-colors">
                        <i data-lucide="package-plus" class="w-4 h-4 inline mr-2"></i>
                        Ajuster Stock
                    </button>
                </div>
            </div>

            <!-- Warehouse Summary -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6 mb-4 sm:mb-6 lg:mb-8">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-orange-100 rounded-full flex items-center justify-center">
                                <i data-lucide="package" class="w-3 h-3 sm:w-5 sm:h-5 text-orange-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Articles en Stock</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="totalItems">12</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <i data-lucide="shopping-cart" class="w-3 h-3 sm:w-5 sm:h-5 text-blue-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Achats ce Mois</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="monthlyPurchases">15</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-red-100 rounded-full flex items-center justify-center">
                                <i data-lucide="alert-triangle" class="w-3 h-3 sm:w-5 sm:h-5 text-red-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Stock Faible</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="lowStockItems">3</p>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 card-hover sm:col-span-2 lg:col-span-1">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-6 h-6 sm:w-8 sm:h-8 bg-green-100 rounded-full flex items-center justify-center">
                                <i data-lucide="dollar-sign" class="w-3 h-3 sm:w-5 sm:h-5 text-green-600"></i>
                            </div>
                        </div>
                        <div class="ml-3 sm:ml-4 min-w-0 flex-1">
                            <p class="text-xs sm:text-sm font-medium text-gray-500 truncate">Valeur Stock</p>
                            <p class="text-lg sm:text-2xl font-semibold text-gray-900" id="stockValue">4,250,000 F</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tabs Navigation -->
            <div class="mb-4 sm:mb-6">
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-4 sm:space-x-8 overflow-x-auto">
                        <button onclick="showWarehouseTab('inventory')" class="warehouse-tab-btn py-2 px-1 border-b-2 border-orange-500 font-medium text-xs sm:text-sm text-orange-600 whitespace-nowrap">
                            Inventaire
                        </button>
                        <button onclick="showWarehouseTab('purchases')" class="warehouse-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Achats
                        </button>
                        <button onclick="showWarehouseTab('suppliers')" class="warehouse-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Fournisseurs
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Inventory Tab -->
            <div id="inventory-tab" class="warehouse-tab">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">Inventaire des Intrants</h3>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Article</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Catégorie</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Actuel</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Min</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix Unitaire</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valeur</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="inventoryTableBody" class="bg-white divide-y divide-gray-200">
                                <!-- Inventory rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Purchases Tab -->
            <div id="purchases-tab" class="warehouse-tab hidden">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">Historique des Achats</h3>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fournisseur</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Article</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantité</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix Unitaire</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="purchasesTableBody" class="bg-white divide-y divide-gray-200">
                                <!-- Purchase rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Suppliers Tab -->
            <div id="suppliers-tab" class="warehouse-tab hidden">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                        <h3 class="text-lg font-semibold text-gray-900">Fournisseurs</h3>
                        <button onclick="showSupplierForm()" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                            <i data-lucide="plus" class="w-4 h-4 inline mr-2"></i>
                            Nouveau Fournisseur
                        </button>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Téléphone</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Spécialité</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dernière Commande</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="suppliersTableBody" class="bg-white divide-y divide-gray-200">
                                <!-- Supplier rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Admin Module -->
        <div id="admin-module" class="module hidden">
            <div class="mb-4 sm:mb-6 lg:mb-8">
                <h2 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mb-1 sm:mb-2">Administration</h2>
                <p class="text-sm sm:text-base text-gray-600">Gestion globale du système</p>
            </div>

            <!-- Admin Tabs Navigation -->
            <div class="mb-4 sm:mb-6">
                <div class="border-b border-gray-200">
                    <nav class="-mb-px flex space-x-4 sm:space-x-8 overflow-x-auto">
                        <button onclick="showAdminTab('dashboard')" class="admin-tab-btn py-2 px-1 border-b-2 border-indigo-500 font-medium text-xs sm:text-sm text-indigo-600 whitespace-nowrap">
                            Tableau de Bord
                        </button>
                        <button onclick="showAdminTab('users')" class="admin-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Utilisateurs
                        </button>
                        <button onclick="showAdminTab('zones')" class="admin-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Zones & Prix
                        </button>
                        <button onclick="showAdminTab('reports')" class="admin-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Rapports
                        </button>
                        <button onclick="showAdminTab('settings')" class="admin-tab-btn py-2 px-1 border-b-2 border-transparent font-medium text-xs sm:text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap">
                            Paramètres
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Admin Dashboard Tab -->
            <div id="admin-dashboard-tab" class="admin-tab">
                <!-- Admin Dashboard -->
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 mb-4 sm:mb-6 lg:mb-8">
                    <!-- Financial Overview -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Vue Financière</h3>
                        <div class="space-y-3 sm:space-y-4">
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Total Collectes</span>
                                <span class="text-sm sm:text-lg font-semibold text-green-600">+8,970,000 F</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Total Distributions</span>
                                <span class="text-sm sm:text-lg font-semibold text-red-600">-2,340,000 F</span>
                            </div>
                            <hr>
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm font-medium text-gray-900">Solde Net</span>
                                <span class="text-lg sm:text-xl font-bold text-blue-600">6,630,000 F</span>
                            </div>
                        </div>
                    </div>

                    <!-- System Stats -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Statistiques Système</h3>
                        <div class="space-y-3 sm:space-y-4">
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Producteurs Actifs</span>
                                <span class="text-sm sm:text-lg font-semibold text-blue-600">247</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Utilisateurs Système</span>
                                <span class="text-sm sm:text-lg font-semibold text-purple-600">3</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Articles en Stock</span>
                                <span class="text-sm sm:text-lg font-semibold text-orange-600">12</span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-xs sm:text-sm text-gray-600">Zones Actives</span>
                                <span class="text-sm sm:text-lg font-semibold text-green-600">3</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Admin Activities -->
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Activités Administratives Récentes</h3>
                    <div class="space-y-3 sm:space-y-4">
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-blue-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Nouveau utilisateur créé - Agent Zone Est</span>
                                <span class="text-xs text-gray-400">Il y a 1h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-green-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Prix mis à jour - Zone Nord: 720 F/kg</span>
                                <span class="text-xs text-gray-400">Il y a 3h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-purple-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Export des données - Collectes du mois</span>
                                <span class="text-xs text-gray-400">Il y a 5h</span>
                            </div>
                        </div>
                        <div class="flex items-start sm:items-center space-x-3">
                            <div class="w-2 h-2 bg-yellow-500 rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                            <div class="flex-1 min-w-0">
                                <span class="text-xs sm:text-sm text-gray-600 block">Sauvegarde système effectuée</span>
                                <span class="text-xs text-gray-400">Il y a 1 jour</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Users Management Tab -->
            <div id="admin-users-tab" class="admin-tab hidden">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3 sm:mb-4">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-2 sm:mb-0">Gestion des Utilisateurs</h3>
                        <button onclick="showUserForm()" class="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                            <i data-lucide="plus" class="w-4 h-4 inline mr-2"></i>
                            Nouvel Utilisateur
                        </button>
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
                                    <th class="hidden sm:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rôle</th>
                                    <th class="hidden md:table-cell px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Zone</th>
                                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="usersTableBody" class="bg-white divide-y divide-gray-200">
                                <!-- User rows will be populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Zones & Pricing Tab -->
            <div id="admin-zones-tab" class="admin-tab hidden">
                <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                    <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Gestion des Prix par Zone</h3>
                    <div class="space-y-4 sm:space-y-6">
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <div class="border border-gray-200 rounded-lg p-4">
                                <h4 class="font-medium text-gray-900 mb-3">Zone Nord</h4>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm text-gray-600">Prix actuel</span>
                                        <span class="font-semibold">720 F/kg</span>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="number" id="priceNord" value="720" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded">
                                        <span class="text-sm text-gray-500">F/kg</span>
                                    </div>
                                    <button onclick="updateZonePrice('nord')" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors">
                                        Mettre à Jour
                                    </button>
                                </div>
                            </div>

                            <div class="border border-gray-200 rounded-lg p-4">
                                <h4 class="font-medium text-gray-900 mb-3">Zone Sud</h4>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm text-gray-600">Prix actuel</span>
                                        <span class="font-semibold">700 F/kg</span>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="number" id="priceSud" value="700" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded">
                                        <span class="text-sm text-gray-500">F/kg</span>
                                    </div>
                                    <button onclick="updateZonePrice('sud')" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors">
                                        Mettre à Jour
                                    </button>
                                </div>
                            </div>

                            <div class="border border-gray-200 rounded-lg p-4 sm:col-span-2 lg:col-span-1">
                                <h4 class="font-medium text-gray-900 mb-3">Zone Est</h4>
                                <div class="space-y-3">
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm text-gray-600">Prix actuel</span>
                                        <span class="font-semibold">680 F/kg</span>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <input type="number" id="priceEst" value="680" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded">
                                        <span class="text-sm text-gray-500">F/kg</span>
                                    </div>
                                    <button onclick="updateZonePrice('est')" class="w-full bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm font-medium transition-colors">
                                        Mettre à Jour
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Zone Statistics -->
                        <div class="border-t pt-4 sm:pt-6">
                            <h4 class="font-medium text-gray-900 mb-3 sm:mb-4">Statistiques par Zone</h4>
                            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                <div class="bg-blue-50 rounded-lg p-4">
                                    <h5 class="font-medium text-blue-900 mb-2">Zone Nord</h5>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-blue-700">Producteurs:</span>
                                            <span class="font-semibold">98</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-blue-700">Collecte (kg):</span>
                                            <span class="font-semibold">4,200</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="bg-green-50 rounded-lg p-4">
                                    <h5 class="font-medium text-green-900 mb-2">Zone Sud</h5>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-green-700">Producteurs:</span>
                                            <span class="font-semibold">89</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-green-700">Collecte (kg):</span>
                                            <span class="font-semibold">3,800</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="bg-yellow-50 rounded-lg p-4">
                                    <h5 class="font-medium text-yellow-900 mb-2">Zone Est</h5>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span class="text-yellow-700">Producteurs:</span>
                                            <span class="font-semibold">60</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-yellow-700">Collecte (kg):</span>
                                            <span class="font-semibold">2,950</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reports Tab -->
            <div id="admin-reports-tab" class="admin-tab hidden">
                <div class="space-y-4 sm:space-y-6">
                    <!-- Export and Reports -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Exports et Rapports</h3>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4">
                            <button onclick="exportData('producers')" class="bg-green-600 hover:bg-green-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                                Export Producteurs
                            </button>
                            <button onclick="exportData('collections')" class="bg-blue-600 hover:bg-blue-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                                Export Collectes
                            </button>
                            <button onclick="exportData('distributions')" class="bg-purple-600 hover:bg-purple-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                                Export Distributions
                            </button>
                            <button onclick="exportData('inventory')" class="bg-orange-600 hover:bg-orange-700 text-white px-3 sm:px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                                Export Inventaire
                            </button>
                        </div>
                    </div>

                    <!-- Report Generation -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Génération de Rapports</h3>
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Type de Rapport</label>
                                    <select id="reportType" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="monthly">Rapport Mensuel</option>
                                        <option value="quarterly">Rapport Trimestriel</option>
                                        <option value="annual">Rapport Annuel</option>
                                        <option value="custom">Période Personnalisée</option>
                                    </select>
                                </div>
                                <div class="grid grid-cols-2 gap-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Début</label>
                                        <input type="date" id="reportStartDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Fin</label>
                                        <input type="date" id="reportEndDate" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </div>
                                </div>
                                <button onclick="generateReport()" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                    <i data-lucide="file-text" class="w-4 h-4 inline mr-2"></i>
                                    Générer Rapport
                                </button>
                            </div>
                            <div class="space-y-4">
                                <h4 class="font-medium text-gray-900">Rapports Récents</h4>
                                <div class="space-y-2">
                                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">Rapport Mensuel - Décembre 2024</p>
                                            <p class="text-xs text-gray-500">Généré le 15/12/2024</p>
                                        </div>
                                        <button class="text-blue-600 hover:text-blue-800 text-sm">Télécharger</button>
                                    </div>
                                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">Rapport Trimestriel - Q4 2024</p>
                                            <p class="text-xs text-gray-500">Généré le 01/12/2024</p>
                                        </div>
                                        <button class="text-blue-600 hover:text-blue-800 text-sm">Télécharger</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="admin-settings-tab" class="admin-tab hidden">
                <div class="space-y-4 sm:space-y-6">
                    <!-- System Settings -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Paramètres Système</h3>
                        <div class="space-y-4 sm:space-y-6">
                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Nom de l'Organisation</label>
                                    <input type="text" value="SCCK - Système de Gestion" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Devise</label>
                                    <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="FCFA" selected>FCFA</option>
                                        <option value="EUR">EUR</option>
                                        <option value="USD">USD</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Langue par Défaut</label>
                                    <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="fr" selected>Français</option>
                                        <option value="en">English</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Fuseau Horaire</label>
                                    <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="GMT" selected>GMT (Abidjan)</option>
                                        <option value="CET">CET (Paris)</option>
                                    </select>
                                </div>
                            </div>
                            <button onclick="saveSystemSettings()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                Sauvegarder les Paramètres
                            </button>
                        </div>
                    </div>

                    <!-- Backup & Security -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Sauvegarde et Sécurité</h3>
                        <div class="space-y-4 sm:space-y-6">
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div class="space-y-3">
                                    <h4 class="font-medium text-gray-900">Sauvegarde Automatique</h4>
                                    <div class="flex items-center space-x-3">
                                        <input type="checkbox" id="autoBackup" checked class="rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                        <label for="autoBackup" class="text-sm text-gray-700">Activer la sauvegarde automatique</label>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Fréquence</label>
                                        <select class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                            <option value="daily" selected>Quotidienne</option>
                                            <option value="weekly">Hebdomadaire</option>
                                            <option value="monthly">Mensuelle</option>
                                        </select>
                                    </div>
                                    <button onclick="createBackup()" class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                        <i data-lucide="download" class="w-4 h-4 inline mr-2"></i>
                                        Créer Sauvegarde Maintenant
                                    </button>
                                </div>
                                <div class="space-y-3">
                                    <h4 class="font-medium text-gray-900">Sécurité</h4>
                                    <div class="space-y-2">
                                        <div class="flex items-center justify-between">
                                            <span class="text-sm text-gray-700">Dernière sauvegarde</span>
                                            <span class="text-sm font-medium text-green-600">Aujourd'hui 02:00</span>
                                        </div>
                                        <div class="flex items-center justify-between">
                                            <span class="text-sm text-gray-700">Taille de la base</span>
                                            <span class="text-sm font-medium text-gray-900">2.4 MB</span>
                                        </div>
                                        <div class="flex items-center justify-between">
                                            <span class="text-sm text-gray-700">Connexions actives</span>
                                            <span class="text-sm font-medium text-blue-600">3 utilisateurs</span>
                                        </div>
                                    </div>
                                    <button onclick="viewSecurityLog()" class="w-full bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                        <i data-lucide="shield" class="w-4 h-4 inline mr-2"></i>
                                        Journal de Sécurité
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- System Information -->
                    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
                        <h3 class="text-base sm:text-lg font-semibold text-gray-900 mb-3 sm:mb-4">Informations Système</h3>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <div class="space-y-2">
                                <h4 class="font-medium text-gray-900">Version</h4>
                                <p class="text-sm text-gray-600">SCCK v2.1.0</p>
                                <p class="text-xs text-gray-500">Dernière mise à jour: 15/12/2024</p>
                            </div>
                            <div class="space-y-2">
                                <h4 class="font-medium text-gray-900">Base de Données</h4>
                                <p class="text-sm text-gray-600">SQLite 3.36</p>
                                <p class="text-xs text-gray-500">Statut: Opérationnelle</p>
                            </div>
                            <div class="space-y-2">
                                <h4 class="font-medium text-gray-900">Licence</h4>
                                <p class="text-sm text-gray-600">Licence Commerciale</p>
                                <p class="text-xs text-gray-500">Expire: 31/12/2025</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Modal Container -->
    <div id="modalContainer" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-2 sm:p-4">
            <div id="modalContent" class="bg-white rounded-lg shadow-xl w-full max-w-xs sm:max-w-lg lg:max-w-4xl xl:max-w-6xl max-h-[95vh] overflow-y-auto">
                <!-- Modal content will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2">
        <!-- Toast notifications will be added here -->
    </div>

    <script>
        // ===== DATABASE SYSTEM =====
        class SCCKDatabase {
            constructor() {
                this.dbName = 'SCCK_Management_DB';
                this.version = 1;
                this.db = null;
                this.isOnline = navigator.onLine;
                this.syncQueue = [];
                this.init();
            }

            async init() {
                try {
                    this.db = await this.openDatabase();
                    await this.createTables();
                    await this.seedInitialData();
                    this.setupOfflineHandling();
                    console.log('Database initialized successfully');
                } catch (error) {
                    console.error('Database initialization failed:', error);
                }
            }

            openDatabase() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open(this.dbName, this.version);
                    
                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve(request.result);
                    
                    request.onupgradeneeded = (event) => {
                        const db = event.target.result;
                        
                        // Create object stores
                        if (!db.objectStoreNames.contains('producers')) {
                            const producerStore = db.createObjectStore('producers', { keyPath: 'id', autoIncrement: true });
                            producerStore.createIndex('matricule', 'matricule', { unique: true });
                            producerStore.createIndex('zone', 'zone', { unique: false });
                            producerStore.createIndex('statut', 'statut', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('collections')) {
                            const collectionStore = db.createObjectStore('collections', { keyPath: 'id', autoIncrement: true });
                            collectionStore.createIndex('producteurId', 'producteurId', { unique: false });
                            collectionStore.createIndex('date', 'date', { unique: false });
                            collectionStore.createIndex('statut', 'statut', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('distributions')) {
                            const distributionStore = db.createObjectStore('distributions', { keyPath: 'id', autoIncrement: true });
                            distributionStore.createIndex('producteurId', 'producteurId', { unique: false });
                            distributionStore.createIndex('date', 'date', { unique: false });
                            distributionStore.createIndex('statut', 'statut', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('inventory')) {
                            const inventoryStore = db.createObjectStore('inventory', { keyPath: 'id', autoIncrement: true });
                            inventoryStore.createIndex('categorie', 'categorie', { unique: false });
                            inventoryStore.createIndex('nom', 'nom', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('purchases')) {
                            const purchaseStore = db.createObjectStore('purchases', { keyPath: 'id', autoIncrement: true });
                            purchaseStore.createIndex('fournisseurId', 'fournisseurId', { unique: false });
                            purchaseStore.createIndex('date', 'date', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('suppliers')) {
                            const supplierStore = db.createObjectStore('suppliers', { keyPath: 'id', autoIncrement: true });
                            supplierStore.createIndex('nom', 'nom', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('users')) {
                            const userStore = db.createObjectStore('users', { keyPath: 'id', autoIncrement: true });
                            userStore.createIndex('email', 'email', { unique: true });
                        }

                        if (!db.objectStoreNames.contains('settings')) {
                            db.createObjectStore('settings', { keyPath: 'key' });
                        }

                        if (!db.objectStoreNames.contains('activities')) {
                            const activityStore = db.createObjectStore('activities', { keyPath: 'id', autoIncrement: true });
                            activityStore.createIndex('date', 'date', { unique: false });
                            activityStore.createIndex('type', 'type', { unique: false });
                        }

                        if (!db.objectStoreNames.contains('sync_queue')) {
                            db.createObjectStore('sync_queue', { keyPath: 'id', autoIncrement: true });
                        }
                    };
                });
            }

            async createTables() {
                // Tables are created in onupgradeneeded
                return Promise.resolve();
            }

            async seedInitialData() {
                const hasData = await this.get('producers', 1);
                if (hasData) return; // Data already exists

                // Seed initial data
                const initialProducers = [
                    { 
                        matricule: 'PROD001', 
                        nom: 'Kouassi', 
                        prenom: 'Jean Baptiste', 
                        zone: 'nord', 
                        telephone: '0701234567', 
                        statut: 'actif', 
                        dateInscription: '2024-01-15', 
                        superficie: 2.5,
                        cni_numero: 'CI0123456789',
                        delegue_nom: 'Yao',
                        delegue_prenom: 'Marie Claire',
                        delegue_matricule: 'DEL001',
                        localite: 'Bouaké, Quartier Commerce'
                    },
                    { 
                        matricule: 'PROD002', 
                        nom: 'Traore', 
                        prenom: 'Aminata Fatou', 
                        zone: 'sud', 
                        telephone: '0709876543', 
                        statut: 'actif', 
                        dateInscription: '2024-01-20', 
                        superficie: 3.0,
                        cni_numero: 'CI0987654321',
                        delegue_nom: 'Diallo',
                        delegue_prenom: 'Ibrahim Sory',
                        delegue_matricule: 'DEL002',
                        localite: 'Abidjan, Yopougon'
                    },
                    { 
                        matricule: 'PROD003', 
                        nom: 'Kone', 
                        prenom: 'Seydou Ibrahim', 
                        zone: 'est', 
                        telephone: '0705555555', 
                        statut: 'inactif', 
                        dateInscription: '2024-02-01', 
                        superficie: 1.8,
                        cni_numero: 'CI0555666777',
                        delegue_nom: 'Ouattara',
                        delegue_prenom: 'Fatou Binta',
                        delegue_matricule: 'DEL003',
                        localite: 'Bondoukou, Centre-ville'
                    }
                ];

                const initialUsers = [
                    { nom: 'Administrateur', email: 'admin@scck.com', password: 'admin123', role: 'Administrateur', zone: 'Toutes', statut: 'actif', lastLogin: null },
                    { nom: 'Superviseur Nord', email: 'sup.nord@scck.com', password: 'sup123', role: 'Superviseur', zone: 'Nord', statut: 'actif', lastLogin: null },
                    { nom: 'Superviseur Sud', email: 'sup.sud@scck.com', password: 'sup123', role: 'Superviseur', zone: 'Sud', statut: 'actif', lastLogin: null }
                ];

                const initialInventory = [
                    { nom: 'Engrais NPK 15-15-15', categorie: 'Engrais', stockActuel: 500, stockMin: 100, prixUnitaire: 1500, unite: 'kg' },
                    { nom: 'Semences Maïs Hybride', categorie: 'Semences', stockActuel: 200, stockMin: 50, prixUnitaire: 2000, unite: 'kg' },
                    { nom: 'Pesticide Lambda', categorie: 'Pesticides', stockActuel: 25, stockMin: 20, prixUnitaire: 3000, unite: 'L' },
                    { nom: 'Herbicide Glyphosate', categorie: 'Herbicides', stockActuel: 15, stockMin: 30, prixUnitaire: 2500, unite: 'L' },
                    { nom: 'Engrais Urée', categorie: 'Engrais', stockActuel: 300, stockMin: 80, prixUnitaire: 1200, unite: 'kg' }
                ];

                const initialSuppliers = [
                    { nom: 'Agro-Inputs SARL', contact: 'Koné Mamadou', telephone: '0708123456', specialite: 'Engrais et Fertilisants', derniereCommande: '2024-12-10', statut: 'actif' },
                    { nom: 'Semences Plus', contact: 'Traoré Fatoumata', telephone: '0709654321', specialite: 'Semences Certifiées', derniereCommande: '2024-12-08', statut: 'actif' },
                    { nom: 'Phyto-Protection', contact: 'Diabaté Sekou', telephone: '0705987654', specialite: 'Pesticides et Herbicides', derniereCommande: '2024-12-05', statut: 'actif' }
                ];

                const initialSettings = [
                    { key: 'organization_name', value: 'SCCK - Système de Gestion' },
                    { key: 'currency', value: 'FCFA' },
                    { key: 'language', value: 'fr' },
                    { key: 'timezone', value: 'GMT' },
                    { key: 'auto_backup', value: true },
                    { key: 'backup_frequency', value: 'daily' },
                    { key: 'zone_prices', value: { nord: 720, sud: 700, est: 680 } }
                ];

                // Insert initial data
                for (const producer of initialProducers) {
                    await this.add('producers', producer);
                }
                for (const user of initialUsers) {
                    await this.add('users', user);
                }
                for (const item of initialInventory) {
                    await this.add('inventory', item);
                }
                for (const supplier of initialSuppliers) {
                    await this.add('suppliers', supplier);
                }
                for (const setting of initialSettings) {
                    await this.add('settings', setting);
                }

                console.log('Initial data seeded successfully');
            }

            setupOfflineHandling() {
                window.addEventListener('online', () => {
                    this.isOnline = true;
                    document.getElementById('offlineIndicator').style.display = 'none';
                    this.syncOfflineData();
                });

                window.addEventListener('offline', () => {
                    this.isOnline = false;
                    document.getElementById('offlineIndicator').style.display = 'block';
                });
            }

            async syncOfflineData() {
                if (!this.isOnline) return;

                const syncItems = await this.getAll('sync_queue');
                for (const item of syncItems) {
                    try {
                        // In a real app, this would sync with a remote server
                        await this.delete('sync_queue', item.id);
                    } catch (error) {
                        console.error('Sync failed for item:', item, error);
                    }
                }

                if (syncItems.length > 0) {
                    this.showSyncIndicator();
                }
            }

            showSyncIndicator() {
                const indicator = document.getElementById('syncIndicator');
                indicator.style.display = 'block';
                setTimeout(() => {
                    indicator.style.display = 'none';
                }, 3000);
            }

            // CRUD Operations
            async add(storeName, data) {
                const transaction = this.db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                
                if (!this.isOnline && storeName !== 'sync_queue') {
                    await this.add('sync_queue', {
                        action: 'add',
                        storeName,
                        data,
                        timestamp: new Date().toISOString()
                    });
                }

                return new Promise((resolve, reject) => {
                    const request = store.add(data);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async get(storeName, id) {
                const transaction = this.db.transaction([storeName], 'readonly');
                const store = transaction.objectStore(storeName);
                
                return new Promise((resolve, reject) => {
                    const request = store.get(id);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async getAll(storeName) {
                const transaction = this.db.transaction([storeName], 'readonly');
                const store = transaction.objectStore(storeName);
                
                return new Promise((resolve, reject) => {
                    const request = store.getAll();
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async update(storeName, data) {
                const transaction = this.db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                
                if (!this.isOnline && storeName !== 'sync_queue') {
                    await this.add('sync_queue', {
                        action: 'update',
                        storeName,
                        data,
                        timestamp: new Date().toISOString()
                    });
                }

                return new Promise((resolve, reject) => {
                    const request = store.put(data);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async delete(storeName, id) {
                const transaction = this.db.transaction([storeName], 'readwrite');
                const store = transaction.objectStore(storeName);
                
                if (!this.isOnline && storeName !== 'sync_queue') {
                    await this.add('sync_queue', {
                        action: 'delete',
                        storeName,
                        id,
                        timestamp: new Date().toISOString()
                    });
                }

                return new Promise((resolve, reject) => {
                    const request = store.delete(id);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async query(storeName, indexName, value) {
                const transaction = this.db.transaction([storeName], 'readonly');
                const store = transaction.objectStore(storeName);
                const index = store.index(indexName);
                
                return new Promise((resolve, reject) => {
                    const request = index.getAll(value);
                    request.onsuccess = () => resolve(request.result);
                    request.onerror = () => reject(request.error);
                });
            }

            async addActivity(type, description, data = {}) {
                const activity = {
                    type,
                    description,
                    data,
                    date: new Date().toISOString(),
                    userId: currentUser?.id || 1
                };
                return await this.add('activities', activity);
            }

            // Backup and Export
            async exportData() {
                const data = {};
                const stores = ['producers', 'collections', 'distributions', 'inventory', 'purchases', 'suppliers', 'users', 'settings'];
                
                for (const store of stores) {
                    data[store] = await this.getAll(store);
                }
                
                return data;
            }

            async importData(data) {
                for (const [storeName, items] of Object.entries(data)) {
                    if (Array.isArray(items)) {
                        for (const item of items) {
                            await this.add(storeName, item);
                        }
                    }
                }
            }
        }

        // ===== APPLICATION STATE =====
        let db;
        let currentUser = null;
        let currentModule = 'dashboard';
        let currentWarehouseTab = 'inventory';
        let currentAdminTab = 'dashboard';
        let charts = {};

        // Initialize Lucide icons
        lucide.createIcons();
        
        // ===== AUTHENTICATION SYSTEM =====
        class AuthManager {
            constructor() {
                this.currentUser = null;
                this.sessionTimeout = 30 * 60 * 1000; // 30 minutes
                this.sessionTimer = null;
            }

            async login(email, password) {
                try {
                    const users = await db.getAll('users');
                    const user = users.find(u => u.email === email && u.password === password);
                    
                    if (user) {
                        this.currentUser = user;
                        currentUser = user;
                        
                        // Update last login
                        user.lastLogin = new Date().toISOString();
                        await db.update('users', user);
                        
                        // Log activity
                        await db.addActivity('login', `Connexion réussie - ${user.nom}`, { userId: user.id, ip: 'localhost' });
                        
                        // Start session timer
                        this.startSessionTimer();
                        
                        // Update UI
                        document.getElementById('userInfo').textContent = `${user.nom} - ${user.zone}`;
                        document.getElementById('mobileUserInfo').textContent = `${user.nom} - ${user.zone}`;
                        
                        return { success: true, user };
                    } else {
                        await db.addActivity('login_failed', `Tentative de connexion échouée - ${email}`, { email, ip: 'localhost' });
                        return { success: false, message: 'Email ou mot de passe incorrect' };
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    return { success: false, message: 'Erreur de connexion' };
                }
            }

            logout() {
                if (this.currentUser) {
                    db.addActivity('logout', `Déconnexion - ${this.currentUser.nom}`, { userId: this.currentUser.id });
                }
                
                this.currentUser = null;
                currentUser = null;
                
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                
                // Show login screen
                document.getElementById('loginScreen').classList.remove('hidden');
                document.getElementById('loadingScreen').classList.add('hidden');
            }

            startSessionTimer() {
                if (this.sessionTimer) {
                    clearTimeout(this.sessionTimer);
                }
                
                this.sessionTimer = setTimeout(() => {
                    showToast('Session expirée. Veuillez vous reconnecter.', 'warning');
                    this.logout();
                }, this.sessionTimeout);
            }

            extendSession() {
                this.startSessionTimer();
            }
        }

        // ===== CHART MANAGER =====
        class ChartManager {
            constructor() {
                this.charts = {};
            }

            async initializeCharts() {
                await this.createCollectionChart();
                await this.createZoneChart();
                await this.createFinancialChart();
                await this.createProducerChart();
            }

            async createCollectionChart() {
                const ctx = document.getElementById('collectionChart');
                if (!ctx) return;

                const collections = await db.getAll('collections');
                const last7Days = this.getLast7Days();
                const data = last7Days.map(date => {
                    const dayCollections = collections.filter(c => c.date === date);
                    return dayCollections.reduce((sum, c) => sum + parseFloat(c.quantite || 0), 0);
                });

                this.charts.collection = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: last7Days.map(date => new Date(date).toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit' })),
                        datasets: [{
                            label: 'Collecte (kg)',
                            data: data,
                            borderColor: 'rgb(59, 130, 246)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            async createZoneChart() {
                const ctx = document.getElementById('zoneChart');
                if (!ctx) return;

                const collections = await db.getAll('collections');
                const producers = await db.getAll('producers');
                
                const zoneData = {
                    nord: 0,
                    sud: 0,
                    est: 0
                };

                collections.forEach(collection => {
                    const producer = producers.find(p => p.id === collection.producteurId);
                    if (producer && zoneData.hasOwnProperty(producer.zone)) {
                        zoneData[producer.zone] += parseFloat(collection.quantite || 0);
                    }
                });

                this.charts.zone = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Zone Nord', 'Zone Sud', 'Zone Est'],
                        datasets: [{
                            data: [zoneData.nord, zoneData.sud, zoneData.est],
                            backgroundColor: [
                                'rgb(59, 130, 246)',
                                'rgb(16, 185, 129)',
                                'rgb(245, 158, 11)'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false
                    }
                });
            }

            async createFinancialChart() {
                const ctx = document.getElementById('financialChart');
                if (!ctx) return;

                const collections = await db.getAll('collections');
                const distributions = await db.getAll('distributions');
                const last6Months = this.getLast6Months();

                const collectionsData = last6Months.map(month => {
                    const monthCollections = collections.filter(c => c.date.startsWith(month));
                    return monthCollections.reduce((sum, c) => sum + parseFloat(c.total || 0), 0);
                });

                const distributionsData = last6Months.map(month => {
                    const monthDistributions = distributions.filter(d => d.date.startsWith(month));
                    return monthDistributions.reduce((sum, d) => sum + parseFloat(d.valeur || 0), 0);
                });

                this.charts.financial = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: last6Months.map(month => new Date(month + '-01').toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' })),
                        datasets: [{
                            label: 'Collectes (F)',
                            data: collectionsData,
                            backgroundColor: 'rgba(16, 185, 129, 0.8)'
                        }, {
                            label: 'Distributions (F)',
                            data: distributionsData,
                            backgroundColor: 'rgba(239, 68, 68, 0.8)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }

            async createProducerChart() {
                const ctx = document.getElementById('producerChart');
                if (!ctx) return;

                const producers = await db.getAll('producers');
                const last6Months = this.getLast6Months();

                const data = last6Months.map(month => {
                    return producers.filter(p => p.dateInscription && p.dateInscription.startsWith(month)).length;
                });

                this.charts.producer = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: last6Months.map(month => new Date(month + '-01').toLocaleDateString('fr-FR', { month: 'short', year: '2-digit' })),
                        datasets: [{
                            label: 'Nouveaux Producteurs',
                            data: data,
                            borderColor: 'rgb(147, 51, 234)',
                            backgroundColor: 'rgba(147, 51, 234, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            }

            getLast7Days() {
                const days = [];
                for (let i = 6; i >= 0; i--) {
                    const date = new Date();
                    date.setDate(date.getDate() - i);
                    days.push(date.toISOString().split('T')[0]);
                }
                return days;
            }

            getLast6Months() {
                const months = [];
                for (let i = 5; i >= 0; i--) {
                    const date = new Date();
                    date.setMonth(date.getMonth() - i);
                    months.push(date.toISOString().substring(0, 7));
                }
                return months;
            }

            async updateCharts() {
                await this.destroyCharts();
                await this.initializeCharts();
            }

            destroyCharts() {
                Object.values(this.charts).forEach(chart => {
                    if (chart) chart.destroy();
                });
                this.charts = {};
            }
        }

        // ===== EXPORT MANAGER =====
        class ExportManager {
            static async exportToExcel(data, filename) {
                const wb = XLSX.utils.book_new();
                
                if (Array.isArray(data)) {
                    const ws = XLSX.utils.json_to_sheet(data);
                    XLSX.utils.book_append_sheet(wb, ws, 'Data');
                } else {
                    Object.entries(data).forEach(([sheetName, sheetData]) => {
                        if (Array.isArray(sheetData)) {
                            const ws = XLSX.utils.json_to_sheet(sheetData);
                            XLSX.utils.book_append_sheet(wb, ws, sheetName);
                        }
                    });
                }
                
                XLSX.writeFile(wb, filename);
            }

            static async exportToPDF(title, data, columns) {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();
                
                // Add title
                doc.setFontSize(16);
                doc.text(title, 20, 20);
                
                // Add date
                doc.setFontSize(10);
                doc.text(`Généré le: ${new Date().toLocaleDateString('fr-FR')}`, 20, 30);
                
                // Add table
                let y = 50;
                const lineHeight = 10;
                
                // Headers
                doc.setFontSize(12);
                columns.forEach((col, index) => {
                    doc.text(col.header, 20 + (index * 40), y);
                });
                
                y += lineHeight;
                
                // Data
                doc.setFontSize(10);
                data.forEach(row => {
                    columns.forEach((col, index) => {
                        const value = row[col.key] || '';
                        doc.text(String(value), 20 + (index * 40), y);
                    });
                    y += lineHeight;
                    
                    if (y > 280) { // New page
                        doc.addPage();
                        y = 20;
                    }
                });
                
                doc.save(`${title.replace(/\s+/g, '_')}.pdf`);
            }

            static async exportDashboard() {
                const data = await db.exportData();
                const filename = `SCCK_Export_${new Date().toISOString().split('T')[0]}.xlsx`;
                await this.exportToExcel(data, filename);
                showToast('Export terminé avec succès', 'success');
            }
        }

        // ===== NOTIFICATION MANAGER =====
        class NotificationManager {
            static async checkLowStock() {
                const inventory = await db.getAll('inventory');
                const lowStockItems = inventory.filter(item => item.stockActuel <= item.stockMin);
                
                if (lowStockItems.length > 0) {
                    const message = `${lowStockItems.length} article(s) en stock faible`;
                    showToast(message, 'warning');
                }
            }

            static async checkPendingPayments() {
                const collections = await db.getAll('collections');
                const pendingPayments = collections.filter(c => c.statut === 'impayé' || c.statut === 'partiel');
                
                if (pendingPayments.length > 0) {
                    const message = `${pendingPayments.length} paiement(s) en attente`;
                    showToast(message, 'warning');
                }
            }

            static async checkOverdueDistributions() {
                const distributions = await db.getAll('distributions');
                const overdueDistributions = distributions.filter(d => {
                    if (d.statut !== 'en_attente') return false;
                    const distributionDate = new Date(d.date);
                    const daysDiff = (new Date() - distributionDate) / (1000 * 60 * 60 * 24);
                    return daysDiff > 30; // 30 days overdue
                });
                
                if (overdueDistributions.length > 0) {
                    const message = `${overdueDistributions.length} distribution(s) en retard de remboursement`;
                    showToast(message, 'error');
                }
            }
        }

        // Initialize managers
        let authManager;
        let chartManager;

        // Data arrays (will be populated from database)
        let producers = [];
        let collections = [];
        let distributions = [];
        let inventory = [];
        let purchases = [];
        let suppliers = [];
        let users = [];

        // Mobile Menu Toggle
        function toggleMobileMenu() {
            const mobileMenu = document.getElementById('mobileMenu');
            mobileMenu.classList.toggle('hidden');
        }

        // Navigation Functions
        function showModule(moduleName) {
            // Close mobile menu when navigating
            const mobileMenu = document.getElementById('mobileMenu');
            mobileMenu.classList.add('hidden');
            // Hide all modules
            document.querySelectorAll('.module').forEach(module => {
                module.classList.add('hidden');
            });

            // Show selected module
            document.getElementById(moduleName + '-module').classList.remove('hidden');
            document.getElementById(moduleName + '-module').classList.add('fade-in');

            // Update navigation
            document.querySelectorAll('.nav-btn, .nav-btn-mobile').forEach(btn => {
                btn.classList.remove('bg-white', 'bg-opacity-20');
            });

            currentModule = moduleName;

            // Populate module data
            switch(moduleName) {
                case 'producers':
                    populateProducersTable();
                    break;
                case 'collection':
                    populateCollectionsTable();
                    break;
                case 'distribution':
                    populateDistributionsTable();
                    break;
                case 'warehouse':
                    populateInventoryTable();
                    populatePurchasesTable();
                    populateSuppliersTable();
                    break;
                case 'admin':
                    showAdminTab('dashboard');
                    break;
            }

            // Reinitialize icons
            lucide.createIcons();
        }

        // Warehouse Tab Functions
        function showWarehouseTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.warehouse-tab').forEach(tab => {
                tab.classList.add('hidden');
            });

            // Show selected tab
            document.getElementById(tabName + '-tab').classList.remove('hidden');

            // Update tab buttons
            document.querySelectorAll('.warehouse-tab-btn').forEach(btn => {
                btn.classList.remove('border-orange-500', 'text-orange-600');
                btn.classList.add('border-transparent', 'text-gray-500');
            });

            event.target.classList.remove('border-transparent', 'text-gray-500');
            event.target.classList.add('border-orange-500', 'text-orange-600');

            currentWarehouseTab = tabName;
        }

        // Inventory Functions
        function populateInventoryTable() {
            const tbody = document.getElementById('inventoryTableBody');
            tbody.innerHTML = '';

            inventory.forEach(item => {
                const valeurStock = item.stockActuel * item.prixUnitaire;
                const isLowStock = item.stockActuel <= item.stockMin;
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm font-medium text-gray-900">${item.nom}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${item.categorie}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${item.stockActuel} ${item.unite}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${item.stockMin} ${item.unite}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${item.prixUnitaire.toLocaleString()} F</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${valeurStock.toLocaleString()} F</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${isLowStock ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}">
                            ${isLowStock ? 'Stock Faible' : 'Normal'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="adjustStock(${item.id})" class="text-indigo-600 hover:text-indigo-900 mr-3">Ajuster</button>
                        <button onclick="editInventoryItem(${item.id})" class="text-green-600 hover:text-green-900">Modifier</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function populatePurchasesTable() {
            const tbody = document.getElementById('purchasesTableBody');
            tbody.innerHTML = '';

            purchases.forEach(purchase => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(purchase.date).toLocaleDateString('fr-FR')}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${purchase.fournisseur}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${purchase.article}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${purchase.quantite}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.prixUnitaire.toLocaleString()} F</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${purchase.total.toLocaleString()} F</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${purchase.statut === 'reçu' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${purchase.statut === 'reçu' ? 'Reçu' : 'En Transit'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="viewPurchase(${purchase.id})" class="text-blue-600 hover:text-blue-900 mr-3">Voir</button>
                        <button onclick="editPurchase(${purchase.id})" class="text-indigo-600 hover:text-indigo-900">Modifier</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function populateSuppliersTable() {
            const tbody = document.getElementById('suppliersTableBody');
            tbody.innerHTML = '';

            suppliers.forEach(supplier => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${supplier.nom}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${supplier.contact}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${supplier.telephone}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${supplier.specialite}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(supplier.derniereCommande).toLocaleDateString('fr-FR')}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${supplier.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${supplier.statut.charAt(0).toUpperCase() + supplier.statut.slice(1)}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="editSupplier(${supplier.id})" class="text-indigo-600 hover:text-indigo-900 mr-3">Modifier</button>
                        <button onclick="viewSupplier(${supplier.id})" class="text-green-600 hover:text-green-900">Voir</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Purchase Form Functions
        function showPurchaseForm(purchaseId = null) {
            const isEdit = purchaseId !== null;
            const purchase = isEdit ? purchases.find(p => p.id === purchaseId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">${isEdit ? 'Modifier' : 'Nouvel'} Achat</h3>
                </div>
                <form onsubmit="savePurchase(event, ${purchaseId})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date *</label>
                            <input type="date" name="date" value="${purchase.date || new Date().toISOString().split('T')[0]}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Fournisseur *</label>
                            <select name="fournisseurId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner un fournisseur</option>
                                ${suppliers.map(s => 
                                    `<option value="${s.id}" ${purchase.fournisseurId === s.id ? 'selected' : ''}>${s.nom}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Article *</label>
                            <input type="text" name="article" value="${purchase.article || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Quantité *</label>
                            <input type="number" name="quantite" value="${purchase.quantite || ''}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prix Unitaire (F) *</label>
                            <input type="number" name="prixUnitaire" value="${purchase.prixUnitaire || ''}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                            <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="en_transit" ${purchase.statut === 'en_transit' ? 'selected' : ''}>En Transit</option>
                                <option value="reçu" ${purchase.statut === 'reçu' ? 'selected' : ''}>Reçu</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-orange-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-orange-700">
                            ${isEdit ? 'Modifier' : 'Enregistrer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function savePurchase(event, purchaseId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            try {
                // Calculate total
                data.fournisseurId = parseInt(data.fournisseurId);
                data.quantite = parseFloat(data.quantite);
                data.prixUnitaire = parseFloat(data.prixUnitaire);
                data.total = data.quantite * data.prixUnitaire;
                
                // Get supplier name
                const supplier = suppliers.find(s => s.id === data.fournisseurId);
                if (!supplier) {
                    showToast('Fournisseur non trouvé', 'error');
                    return;
                }
                data.fournisseur = supplier.nom;

                if (purchaseId) {
                    // Update existing purchase
                    const index = purchases.findIndex(p => p.id === purchaseId);
                    if (index !== -1) {
                        const updatedPurchase = { ...purchases[index], ...data };
                        purchases[index] = updatedPurchase;
                        
                        await db.update('purchases', updatedPurchase);
                        await db.addActivity('purchase', `Achat modifié - ${data.article}`, { purchaseId });
                        
                        showToast('Achat modifié avec succès', 'success');
                    }
                } else {
                    // Add new purchase
                    const newId = purchases.length > 0 ? Math.max(...purchases.map(p => p.id || 0)) + 1 : 1;
                    const newPurchase = {
                        id: newId,
                        ...data
                    };
                    
                    purchases.push(newPurchase);
                    
                    await db.add('purchases', newPurchase);
                    await db.addActivity('purchase', `Nouvel achat - ${data.article}: ${data.quantite}`, { purchaseId: newId });
                    
                    showToast('Achat enregistré avec succès', 'success');
                }

                closeModal();
                populatePurchasesTable();
                await updateDashboardStats();
            } catch (error) {
                console.error('Error saving purchase:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function showStockForm(itemId = null) {
            const item = itemId ? inventory.find(i => i.id === itemId) : null;
            
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Ajustement de Stock</h3>
                </div>
                <form onsubmit="adjustStockSubmit(event, ${itemId})" class="p-6">
                    ${!itemId ? `
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Article *</label>
                        <select name="itemId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="">Sélectionner un article</option>
                            ${inventory.map(i => 
                                `<option value="${i.id}">${i.nom} (Stock: ${i.stockActuel} ${i.unite})</option>`
                            ).join('')}
                        </select>
                    </div>
                    ` : `
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Article</label>
                        <p class="text-sm text-gray-900 bg-gray-50 p-2 rounded">${item.nom} (Stock actuel: ${item.stockActuel} ${item.unite})</p>
                    </div>
                    `}
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Type d'Ajustement *</label>
                            <select name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="entree">Entrée (+)</option>
                                <option value="sortie">Sortie (-)</option>
                                <option value="correction">Correction</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Quantité *</label>
                            <input type="number" name="quantite" required min="0" step="0.1" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Motif</label>
                        <textarea name="motif" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Raison de l'ajustement..."></textarea>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-teal-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-teal-700">
                            Ajuster Stock
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function adjustStockSubmit(event, itemId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            try {
                const targetItemId = itemId || parseInt(data.itemId);
                const item = inventory.find(i => i.id === targetItemId);
                if (!item) {
                    showToast('Article non trouvé', 'error');
                    return;
                }
                
                const quantite = parseFloat(data.quantite);
                let newStock = item.stockActuel;
                
                switch(data.type) {
                    case 'entree':
                        newStock += quantite;
                        break;
                    case 'sortie':
                        newStock -= quantite;
                        break;
                    case 'correction':
                        newStock = quantite;
                        break;
                }
                
                if (newStock < 0) {
                    showToast('Erreur: Le stock ne peut pas être négatif', 'error');
                    return;
                }
                
                const updatedItem = { ...item, stockActuel: newStock };
                const index = inventory.findIndex(i => i.id === targetItemId);
                inventory[index] = updatedItem;
                
                await db.update('inventory', updatedItem);
                await db.addActivity('inventory', `Ajustement stock - ${item.nom}: ${data.type} ${quantite}`, { itemId: targetItemId });
                
                showToast('Stock ajusté avec succès', 'success');
                closeModal();
                populateInventoryTable();
                await updateDashboardStats();
            } catch (error) {
                console.error('Error adjusting stock:', error);
                showToast('Erreur lors de l\'ajustement', 'error');
            }
        }

        function adjustStock(itemId) {
            showStockForm(itemId);
        }

        function showSupplierForm(supplierId = null) {
            const isEdit = supplierId !== null;
            const supplier = isEdit ? suppliers.find(s => s.id === supplierId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">${isEdit ? 'Modifier' : 'Nouveau'} Fournisseur</h3>
                </div>
                <form onsubmit="saveSupplier(event, ${supplierId})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nom de l'entreprise *</label>
                            <input type="text" name="nom" value="${supplier.nom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Personne de contact *</label>
                            <input type="text" name="contact" value="${supplier.contact || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Téléphone *</label>
                            <input type="tel" name="telephone" value="${supplier.telephone || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Spécialité *</label>
                            <input type="text" name="specialite" value="${supplier.specialite || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                            <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="actif" ${supplier.statut === 'actif' ? 'selected' : ''}>Actif</option>
                                <option value="inactif" ${supplier.statut === 'inactif' ? 'selected' : ''}>Inactif</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                            ${isEdit ? 'Modifier' : 'Enregistrer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function saveSupplier(event, supplierId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);

            try {
                if (supplierId) {
                    // Update existing supplier
                    const index = suppliers.findIndex(s => s.id === supplierId);
                    if (index !== -1) {
                        const updatedSupplier = { ...suppliers[index], ...data };
                        suppliers[index] = updatedSupplier;
                        
                        await db.update('suppliers', updatedSupplier);
                        await db.addActivity('supplier', `Fournisseur modifié - ${data.nom}`, { supplierId });
                        
                        showToast('Fournisseur modifié avec succès', 'success');
                    }
                } else {
                    // Add new supplier
                    const newId = suppliers.length > 0 ? Math.max(...suppliers.map(s => s.id || 0)) + 1 : 1;
                    const newSupplier = {
                        id: newId,
                        derniereCommande: null,
                        ...data
                    };
                    
                    suppliers.push(newSupplier);
                    
                    await db.add('suppliers', newSupplier);
                    await db.addActivity('supplier', `Nouveau fournisseur - ${data.nom}`, { supplierId: newId });
                    
                    showToast('Fournisseur enregistré avec succès', 'success');
                }

                closeModal();
                populateSuppliersTable();
            } catch (error) {
                console.error('Error saving supplier:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function editSupplier(id) {
            showSupplierForm(id);
        }

        function viewSupplier(id) {
            const supplier = suppliers.find(s => s.id === id);
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Détails du Fournisseur</h3>
                </div>
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Nom de l'entreprise</label>
                            <p class="mt-1 text-sm text-gray-900">${supplier.nom}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Personne de contact</label>
                            <p class="mt-1 text-sm text-gray-900">${supplier.contact}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Téléphone</label>
                            <p class="mt-1 text-sm text-gray-900">${supplier.telephone}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Spécialité</label>
                            <p class="mt-1 text-sm text-gray-900">${supplier.specialite}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Dernière commande</label>
                            <p class="mt-1 text-sm text-gray-900">${supplier.derniereCommande ? new Date(supplier.derniereCommande).toLocaleDateString('fr-FR') : 'Aucune'}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Statut</label>
                            <span class="mt-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${supplier.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${supplier.statut.charAt(0).toUpperCase() + supplier.statut.slice(1)}
                            </span>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end">
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(modalContent);
        }

        // Producer Functions
        function populateProducersTable() {
            const tbody = document.getElementById('producersTableBody');
            tbody.innerHTML = '';

            producers.forEach(producer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <div class="text-xs sm:text-sm font-medium text-gray-900">${producer.nom} ${producer.prenom}</div>
                        <div class="text-xs text-gray-500 sm:hidden">${producer.matricule}</div>
                        <div class="text-xs text-gray-500 md:hidden">Zone ${producer.zone.charAt(0).toUpperCase() + producer.zone.slice(1)}</div>
                        <div class="text-xs text-gray-500 lg:hidden">${producer.telephone}</div>
                    </td>
                    <td class="hidden sm:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producer.matricule}</td>
                    <td class="hidden md:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">Zone ${producer.zone.charAt(0).toUpperCase() + producer.zone.slice(1)}</td>
                    <td class="hidden lg:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producer.telephone}</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${producer.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${producer.statut.charAt(0).toUpperCase() + producer.statut.slice(1)}
                        </span>
                    </td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium">
                        <button onclick="editProducer(${producer.id})" class="text-indigo-600 hover:text-indigo-900 mr-2 sm:mr-3">Modifier</button>
                        <button onclick="viewProducer(${producer.id})" class="text-green-600 hover:text-green-900">Voir</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function showProducerForm(producerId = null) {
            const isEdit = producerId !== null;
            const producer = isEdit ? producers.find(p => p.id === producerId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">
                        <i data-lucide="user-plus" class="w-5 h-5 inline mr-2"></i>
                        ${isEdit ? 'Modifier Producteur' : 'FICHE D\'ENRÔLEMENT'}
                    </h3>
                </div>
                <form onsubmit="saveProducer(event, ${producerId})" class="p-4 sm:p-6 max-h-[70vh] overflow-y-auto">
                    <!-- Informations sur les délégués -->
                    <div class="mb-8">
                        <h4 class="text-lg font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                            <i data-lucide="users" class="w-4 h-4 inline mr-2"></i>
                            Informations sur les Délégués
                        </h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nom du Délégué *</label>
                                <input type="text" name="delegue_nom" value="${producer.delegue_nom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Prénom du Délégué *</label>
                                <input type="text" name="delegue_prenom" value="${producer.delegue_prenom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Matricule Délégué *</label>
                                <input type="text" name="delegue_matricule" value="${producer.delegue_matricule || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Zone *</label>
                                <select name="zone" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <option value="">Sélectionner une zone</option>
                                    <option value="nord" ${producer.zone === 'nord' ? 'selected' : ''}>Zone Nord</option>
                                    <option value="sud" ${producer.zone === 'sud' ? 'selected' : ''}>Zone Sud</option>
                                    <option value="est" ${producer.zone === 'est' ? 'selected' : ''}>Zone Est</option>
                                </select>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Localité *</label>
                                <input type="text" name="localite" value="${producer.localite || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Village, quartier, commune...">
                            </div>
                        </div>
                    </div>

                    <!-- Informations sur le producteur -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                            <i data-lucide="user" class="w-4 h-4 inline mr-2"></i>
                            Informations sur le Producteur
                        </h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Nom *</label>
                                <input type="text" name="nom" value="${producer.nom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Prénom *</label>
                                <input type="text" name="prenom" value="${producer.prenom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">CNI. Numéro *</label>
                                <input type="text" name="cni_numero" value="${producer.cni_numero || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Ex: CI0123456789">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Contact *</label>
                                <input type="tel" name="telephone" value="${producer.telephone || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Ex: 0701234567">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Matricule Producteur</label>
                                <input type="text" name="matricule" value="${producer.matricule || ''}" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500" placeholder="Généré automatiquement">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Superficie (ha) *</label>
                                <input type="number" name="superficie" value="${producer.superficie || ''}" required step="0.1" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-2">Photo du Producteur</label>
                                <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                                    <div class="space-y-1 text-center">
                                        <div id="photo-preview-${producerId || 'new'}" class="mx-auto h-20 w-20 rounded-full bg-gray-100 flex items-center justify-center ${producer.photo ? 'hidden' : ''}">
                                            <i data-lucide="camera" class="h-8 w-8 text-gray-400"></i>
                                        </div>
                                        ${producer.photo ? `<img id="photo-display-${producerId || 'new'}" src="${producer.photo}" class="mx-auto h-20 w-20 rounded-full object-cover">` : ''}
                                        <div class="flex text-sm text-gray-600">
                                            <label for="photo-upload-${producerId || 'new'}" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                                                <span>Télécharger une photo</span>
                                                <input id="photo-upload-${producerId || 'new'}" name="photo" type="file" accept="image/*" class="sr-only" onchange="handlePhotoUpload(event, '${producerId || 'new'}')">
                                            </label>
                                            <p class="pl-1">ou glisser-déposer</p>
                                        </div>
                                        <p class="text-xs text-gray-500">PNG, JPG, GIF jusqu'à 2MB</p>
                                    </div>
                                </div>
                                <input type="hidden" name="photo_data" id="photo-data-${producerId || 'new'}" value="${producer.photo || ''}">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                                <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <option value="actif" ${producer.statut === 'actif' ? 'selected' : ''}>Actif</option>
                                    <option value="inactif" ${producer.statut === 'inactif' ? 'selected' : ''}>Inactif</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <i data-lucide="save" class="w-4 h-4 inline mr-2"></i>
                            ${isEdit ? 'Modifier' : 'Enregistrer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        function handlePhotoUpload(event, formId) {
            const file = event.target.files[0];
            if (!file) return;

            // Validate file size (2MB max)
            if (file.size > 2 * 1024 * 1024) {
                showToast('La taille de l\'image ne doit pas dépasser 2MB', 'error');
                return;
            }

            // Validate file type
            if (!file.type.startsWith('image/')) {
                showToast('Veuillez sélectionner un fichier image valide', 'error');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const photoData = e.target.result;
                
                // Update preview
                const preview = document.getElementById(`photo-preview-${formId}`);
                const display = document.getElementById(`photo-display-${formId}`);
                const hiddenInput = document.getElementById(`photo-data-${formId}`);
                
                if (preview) preview.classList.add('hidden');
                
                if (display) {
                    display.src = photoData;
                    display.classList.remove('hidden');
                } else {
                    // Create new image element
                    const img = document.createElement('img');
                    img.id = `photo-display-${formId}`;
                    img.src = photoData;
                    img.className = 'mx-auto h-20 w-20 rounded-full object-cover';
                    preview.parentNode.insertBefore(img, preview);
                }
                
                if (hiddenInput) {
                    hiddenInput.value = photoData;
                }
            };
            
            reader.readAsDataURL(file);
        }

        async function saveProducer(event, producerId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            // Get photo data from hidden input
            const photoData = document.getElementById(`photo-data-${producerId || 'new'}`);
            if (photoData && photoData.value) {
                data.photo = photoData.value;
            }

            try {
                if (producerId) {
                    // Update existing producer
                    const index = producers.findIndex(p => p.id === producerId);
                    if (index !== -1) {
                        const updatedProducer = { ...producers[index], ...data };
                        producers[index] = updatedProducer;
                        
                        // Update database
                        await db.update('producers', updatedProducer);
                        await db.addActivity('producer', `Producteur modifié - ${data.nom} ${data.prenom}`, { producerId });
                        
                        showToast('Producteur modifié avec succès', 'success');
                    }
                } else {
                    // Add new producer
                    const newId = producers.length > 0 ? Math.max(...producers.map(p => p.id || 0)) + 1 : 1;
                    const matricule = `PROD${String(newId).padStart(3, '0')}`;
                    const newProducer = {
                        id: newId,
                        matricule,
                        dateInscription: new Date().toISOString().split('T')[0],
                        ...data
                    };
                    
                    producers.push(newProducer);
                    
                    // Save to database
                    await db.add('producers', newProducer);
                    await db.addActivity('producer', `Nouveau producteur enregistré - ${data.nom} ${data.prenom}`, { producerId: newId });
                    
                    showToast('Producteur enregistré avec succès', 'success');
                }

                closeModal();
                populateProducersTable();
            } catch (error) {
                console.error('Error saving producer:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function editProducer(id) {
            showProducerForm(id);
        }

        function viewProducer(id) {
            const producer = producers.find(p => p.id === id);
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">
                        <i data-lucide="user" class="w-5 h-5 inline mr-2"></i>
                        Fiche Producteur - ${producer.matricule}
                    </h3>
                </div>
                <div class="p-4 sm:p-6 max-h-[70vh] overflow-y-auto">
                    <!-- Photo du producteur -->
                    ${producer.photo ? `
                    <div class="flex justify-center mb-6">
                        <img src="${producer.photo}" alt="Photo de ${producer.nom} ${producer.prenom}" class="h-24 w-24 rounded-full object-cover border-4 border-blue-100">
                    </div>
                    ` : ''}
                    
                    <!-- Informations sur les délégués -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                            <i data-lucide="users" class="w-4 h-4 inline mr-2"></i>
                            Informations sur les Délégués
                        </h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Nom du Délégué</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.delegue_nom || 'Non renseigné'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Prénom du Délégué</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.delegue_prenom || 'Non renseigné'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Matricule Délégué</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.delegue_matricule || 'Non renseigné'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Localité</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.localite || 'Non renseignée'}</p>
                            </div>
                        </div>
                    </div>

                    <!-- Informations sur le producteur -->
                    <div class="mb-6">
                        <h4 class="text-lg font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200">
                            <i data-lucide="user" class="w-4 h-4 inline mr-2"></i>
                            Informations sur le Producteur
                        </h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Matricule</label>
                                <p class="mt-1 text-sm font-semibold text-blue-600">${producer.matricule}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Nom Complet</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.nom} ${producer.prenom}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">CNI. Numéro</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.cni_numero || 'Non renseigné'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Contact</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.telephone}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Zone</label>
                                <p class="mt-1 text-sm text-gray-900">Zone ${producer.zone.charAt(0).toUpperCase() + producer.zone.slice(1)}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Superficie</label>
                                <p class="mt-1 text-sm text-gray-900">${producer.superficie || 'Non renseignée'} ha</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Date d'inscription</label>
                                <p class="mt-1 text-sm text-gray-900">${new Date(producer.dateInscription).toLocaleDateString('fr-FR')}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-500">Statut</label>
                                <span class="mt-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${producer.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                    ${producer.statut.charAt(0).toUpperCase() + producer.statut.slice(1)}
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-between pt-4 border-t border-gray-200">
                        <button onclick="editProducer(${id})" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <i data-lucide="edit" class="w-4 h-4 inline mr-2"></i>
                            Modifier
                        </button>
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(modalContent);
        }

        // Collection Functions
        function populateCollectionsTable() {
            const tbody = document.getElementById('collectionsTableBody');
            tbody.innerHTML = '';

            collections.forEach(collection => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">${new Date(collection.date).toLocaleDateString('fr-FR')}</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <div class="text-xs sm:text-sm font-medium text-gray-900">${collection.producteur}</div>
                        <div class="text-xs text-gray-500 sm:hidden">${collection.quantite} kg - ${collection.prixKg} F/kg</div>
                        <div class="text-xs text-gray-500 lg:hidden">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${collection.statut === 'payé' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                ${collection.statut.charAt(0).toUpperCase() + collection.statut.slice(1)}
                            </span>
                        </div>
                    </td>
                    <td class="hidden sm:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${collection.quantite} kg</td>
                    <td class="hidden md:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${collection.prixKg} F</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium text-gray-900">${collection.total.toLocaleString()} F</td>
                    <td class="hidden lg:table-cell px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${collection.statut === 'payé' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${collection.statut.charAt(0).toUpperCase() + collection.statut.slice(1)}
                        </span>
                    </td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium">
                        <button onclick="printReceipt(${collection.id})" class="text-blue-600 hover:text-blue-900 mr-2 sm:mr-3">Reçu</button>
                        <button onclick="editCollection(${collection.id})" class="text-indigo-600 hover:text-indigo-900">Modifier</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function showCollectionForm(collectionId = null) {
            const isEdit = collectionId !== null;
            const collection = isEdit ? collections.find(c => c.id === collectionId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">${isEdit ? 'Modifier' : 'Nouvelle'} Collecte</h3>
                </div>
                <form onsubmit="saveCollection(event, ${collectionId})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date *</label>
                            <input type="date" name="date" value="${collection.date || new Date().toISOString().split('T')[0]}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Producteur *</label>
                            <select name="producteurId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner un producteur</option>
                                ${producers.filter(p => p.statut === 'actif').map(p => 
                                    `<option value="${p.id}" ${collection.producteurId === p.id ? 'selected' : ''}>${p.matricule} - ${p.nom} ${p.prenom}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Quantité (kg) *</label>
                            <input type="number" name="quantite" value="${collection.quantite || ''}" required step="0.1" min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prix/kg (F) *</label>
                            <input type="number" name="prixKg" value="${collection.prixKg || '720'}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Statut de Paiement</label>
                            <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="payé" ${collection.statut === 'payé' ? 'selected' : ''}>Payé</option>
                                <option value="partiel" ${collection.statut === 'partiel' ? 'selected' : ''}>Paiement Partiel</option>
                                <option value="impayé" ${collection.statut === 'impayé' ? 'selected' : ''}>Non Payé</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-green-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-green-700">
                            ${isEdit ? 'Modifier' : 'Enregistrer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function saveCollection(event, collectionId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            try {
                // Calculate total
                data.total = parseFloat(data.quantite) * parseFloat(data.prixKg);
                data.producteurId = parseInt(data.producteurId);
                data.quantite = parseFloat(data.quantite);
                data.prixKg = parseFloat(data.prixKg);
                
                // Get producer name
                const producer = producers.find(p => p.id === data.producteurId);
                if (!producer) {
                    showToast('Producteur non trouvé', 'error');
                    return;
                }
                data.producteur = `${producer.nom} ${producer.prenom}`;

                if (collectionId) {
                    // Update existing collection
                    const index = collections.findIndex(c => c.id === collectionId);
                    if (index !== -1) {
                        const updatedCollection = { ...collections[index], ...data };
                        collections[index] = updatedCollection;
                        
                        await db.update('collections', updatedCollection);
                        await db.addActivity('collection', `Collecte modifiée - ${data.producteur}`, { collectionId });
                        
                        showToast('Collecte modifiée avec succès', 'success');
                    }
                } else {
                    // Add new collection
                    const newId = collections.length > 0 ? Math.max(...collections.map(c => c.id || 0)) + 1 : 1;
                    const newCollection = {
                        id: newId,
                        ...data
                    };
                    
                    collections.push(newCollection);
                    
                    await db.add('collections', newCollection);
                    await db.addActivity('collection', `Nouvelle collecte - ${data.producteur}: ${data.quantite}kg`, { collectionId: newId });
                    
                    showToast('Collecte enregistrée avec succès', 'success');
                }

                closeModal();
                populateCollectionsTable();
                await updateDashboardStats();
            } catch (error) {
                console.error('Error saving collection:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function editCollection(id) {
            showCollectionForm(id);
        }

        function printReceipt(id) {
            const collection = collections.find(c => c.id === id);
            const receiptContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Reçu de Collecte #${String(id).padStart(6, '0')}</h3>
                </div>
                <div class="p-6">
                    <div class="text-center mb-6">
                        <h2 class="text-xl font-bold text-gray-900">SCCK - Système de Gestion</h2>
                        <p class="text-gray-600">Reçu de Collecte</p>
                    </div>
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <p class="text-sm text-gray-600">Date:</p>
                            <p class="font-medium">${new Date(collection.date).toLocaleDateString('fr-FR')}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Reçu N°:</p>
                            <p class="font-medium">#${String(id).padStart(6, '0')}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Producteur:</p>
                            <p class="font-medium">${collection.producteur}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Quantité:</p>
                            <p class="font-medium">${collection.quantite} kg</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Prix/kg:</p>
                            <p class="font-medium">${collection.prixKg} F</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Total:</p>
                            <p class="font-bold text-lg">${collection.total.toLocaleString()} F</p>
                        </div>
                    </div>
                    <div class="border-t pt-4">
                        <p class="text-xs text-gray-500 text-center">Merci pour votre collaboration</p>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button onclick="window.print()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Imprimer
                        </button>
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(receiptContent);
        }

        // Distribution Functions
        function populateDistributionsTable() {
            const tbody = document.getElementById('distributionsTableBody');
            tbody.innerHTML = '';

            distributions.forEach(distribution => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(distribution.date).toLocaleDateString('fr-FR')}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${distribution.producteur}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${distribution.intrant}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${distribution.quantite}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${distribution.valeur.toLocaleString()} F</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${distribution.statut === 'remboursé' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                            ${distribution.statut === 'remboursé' ? 'Remboursé' : 'En Attente'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onclick="printDistributionReceipt(${distribution.id})" class="text-blue-600 hover:text-blue-900 mr-3">Reçu</button>
                        <button onclick="editDistribution(${distribution.id})" class="text-indigo-600 hover:text-indigo-900">Modifier</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function showDistributionForm(distributionId = null) {
            const isEdit = distributionId !== null;
            const distribution = isEdit ? distributions.find(d => d.id === distributionId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">${isEdit ? 'Modifier' : 'Nouvelle'} Distribution</h3>
                </div>
                <form onsubmit="saveDistribution(event, ${distributionId})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date *</label>
                            <input type="date" name="date" value="${distribution.date || new Date().toISOString().split('T')[0]}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Producteur *</label>
                            <select name="producteurId" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner un producteur</option>
                                ${producers.filter(p => p.statut === 'actif').map(p => 
                                    `<option value="${p.id}" ${distribution.producteurId === p.id ? 'selected' : ''}>${p.matricule} - ${p.nom} ${p.prenom}</option>`
                                ).join('')}
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Type d'Intrant *</label>
                            <select name="intrant" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner un intrant</option>
                                <option value="Engrais NPK" ${distribution.intrant === 'Engrais NPK' ? 'selected' : ''}>Engrais NPK</option>
                                <option value="Semences" ${distribution.intrant === 'Semences' ? 'selected' : ''}>Semences</option>
                                <option value="Pesticides" ${distribution.intrant === 'Pesticides' ? 'selected' : ''}>Pesticides</option>
                                <option value="Herbicides" ${distribution.intrant === 'Herbicides' ? 'selected' : ''}>Herbicides</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Quantité *</label>
                            <input type="number" name="quantite" value="${distribution.quantite || ''}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Valeur (F) *</label>
                            <input type="number" name="valeur" value="${distribution.valeur || ''}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                            <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="en_attente" ${distribution.statut === 'en_attente' ? 'selected' : ''}>En Attente</option>
                                <option value="remboursé" ${distribution.statut === 'remboursé' ? 'selected' : ''}>Remboursé</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-purple-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-purple-700">
                            ${isEdit ? 'Modifier' : 'Enregistrer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function saveDistribution(event, distributionId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            try {
                data.producteurId = parseInt(data.producteurId);
                data.valeur = parseInt(data.valeur);
                data.quantite = parseInt(data.quantite);
                
                // Get producer name
                const producer = producers.find(p => p.id === data.producteurId);
                if (!producer) {
                    showToast('Producteur non trouvé', 'error');
                    return;
                }
                data.producteur = `${producer.nom} ${producer.prenom}`;

                if (distributionId) {
                    // Update existing distribution
                    const index = distributions.findIndex(d => d.id === distributionId);
                    if (index !== -1) {
                        const updatedDistribution = { ...distributions[index], ...data };
                        distributions[index] = updatedDistribution;
                        
                        await db.update('distributions', updatedDistribution);
                        await db.addActivity('distribution', `Distribution modifiée - ${data.producteur}`, { distributionId });
                        
                        showToast('Distribution modifiée avec succès', 'success');
                    }
                } else {
                    // Add new distribution
                    const newId = distributions.length > 0 ? Math.max(...distributions.map(d => d.id || 0)) + 1 : 1;
                    const newDistribution = {
                        id: newId,
                        ...data
                    };
                    
                    distributions.push(newDistribution);
                    
                    await db.add('distributions', newDistribution);
                    await db.addActivity('distribution', `Nouvelle distribution - ${data.producteur}: ${data.intrant}`, { distributionId: newId });
                    
                    showToast('Distribution enregistrée avec succès', 'success');
                }

                closeModal();
                populateDistributionsTable();
                await updateDashboardStats();
            } catch (error) {
                console.error('Error saving distribution:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function editDistribution(id) {
            showDistributionForm(id);
        }

        function printDistributionReceipt(id) {
            const distribution = distributions.find(d => d.id === id);
            const receiptContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Reçu de Distribution #${String(id).padStart(6, '0')}</h3>
                </div>
                <div class="p-6">
                    <div class="text-center mb-6">
                        <h2 class="text-xl font-bold text-gray-900">SCCK - Système de Gestion</h2>
                        <p class="text-gray-600">Reçu de Distribution d'Intrants</p>
                    </div>
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <p class="text-sm text-gray-600">Date:</p>
                            <p class="font-medium">${new Date(distribution.date).toLocaleDateString('fr-FR')}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Reçu N°:</p>
                            <p class="font-medium">#${String(id).padStart(6, '0')}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Producteur:</p>
                            <p class="font-medium">${distribution.producteur}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Intrant:</p>
                            <p class="font-medium">${distribution.intrant}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Quantité:</p>
                            <p class="font-medium">${distribution.quantite}</p>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600">Valeur:</p>
                            <p class="font-bold text-lg">${distribution.valeur.toLocaleString()} F</p>
                        </div>
                    </div>
                    <div class="border-t pt-4">
                        <p class="text-xs text-gray-500 text-center">Crédit à rembourser lors des prochaines collectes</p>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button onclick="window.print()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Imprimer
                        </button>
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(receiptContent);
        }

        // Admin Tab Functions
        let currentAdminTab = 'dashboard';

        function showAdminTab(tabName) {
            // Hide all admin tabs
            document.querySelectorAll('.admin-tab').forEach(tab => {
                tab.classList.add('hidden');
            });

            // Show selected tab
            document.getElementById(`admin-${tabName}-tab`).classList.remove('hidden');

            // Update tab buttons
            document.querySelectorAll('.admin-tab-btn').forEach(btn => {
                btn.classList.remove('border-indigo-500', 'text-indigo-600');
                btn.classList.add('border-transparent', 'text-gray-500');
            });

            event.target.classList.remove('border-transparent', 'text-gray-500');
            event.target.classList.add('border-indigo-500', 'text-indigo-600');

            currentAdminTab = tabName;

            // Populate data based on tab
            if (tabName === 'users') {
                populateUsersTable();
            }
        }

        // Admin Functions
        function populateUsersTable() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = '';

            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <div class="text-xs sm:text-sm font-medium text-gray-900">${user.nom}</div>
                        <div class="text-xs text-gray-500 sm:hidden">${user.email}</div>
                        <div class="text-xs text-gray-500 md:hidden">${user.zone}</div>
                    </td>
                    <td class="hidden sm:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.email}</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">${user.role}</td>
                    <td class="hidden md:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.zone}</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${user.statut.charAt(0).toUpperCase() + user.statut.slice(1)}
                        </span>
                    </td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium">
                        <button onclick="editUser(${user.id})" class="text-indigo-600 hover:text-indigo-900 mr-2 sm:mr-3">Modifier</button>
                        <button onclick="deleteUser(${user.id})" class="text-red-600 hover:text-red-900">Supprimer</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        function updateZonePrice(zone) {
            const priceInput = document.getElementById(`price${zone.charAt(0).toUpperCase() + zone.slice(1)}`);
            const newPrice = priceInput.value;
            
            if (newPrice && newPrice > 0) {
                showToast(`Prix mis à jour pour la Zone ${zone.charAt(0).toUpperCase() + zone.slice(1)}: ${newPrice} F/kg`, 'success');
                // In a real app, this would update the database
            } else {
                showToast('Veuillez entrer un prix valide', 'error');
            }
        }

        function generateReport() {
            const reportType = document.getElementById('reportType').value;
            const startDate = document.getElementById('reportStartDate').value;
            const endDate = document.getElementById('reportEndDate').value;
            
            showToast('Génération du rapport en cours...', 'info');
            
            // Simulate report generation
            setTimeout(() => {
                showToast('Rapport généré avec succès', 'success');
            }, 2000);
        }

        function saveSystemSettings() {
            showToast('Paramètres système sauvegardés', 'success');
        }

        function createBackup() {
            showToast('Création de la sauvegarde en cours...', 'info');
            
            setTimeout(() => {
                showToast('Sauvegarde créée avec succès', 'success');
            }, 3000);
        }

        function viewSecurityLog() {
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Journal de Sécurité</h3>
                </div>
                <div class="p-6">
                    <div class="space-y-3">
                        <div class="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                            <div>
                                <p class="text-sm font-medium text-gray-900">Connexion réussie - Admin</p>
                                <p class="text-xs text-gray-500">15/12/2024 08:30:15 - IP: 192.168.1.100</p>
                            </div>
                            <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">Succès</span>
                        </div>
                        <div class="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                            <div>
                                <p class="text-sm font-medium text-gray-900">Connexion réussie - Superviseur Nord</p>
                                <p class="text-xs text-gray-500">15/12/2024 07:45:22 - IP: 192.168.1.101</p>
                            </div>
                            <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded">Succès</span>
                        </div>
                        <div class="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
                            <div>
                                <p class="text-sm font-medium text-gray-900">Tentative de connexion échouée</p>
                                <p class="text-xs text-gray-500">14/12/2024 23:15:33 - IP: 192.168.1.200</p>
                            </div>
                            <span class="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded">Échec</span>
                        </div>
                        <div class="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                            <div>
                                <p class="text-sm font-medium text-gray-900">Sauvegarde automatique</p>
                                <p class="text-xs text-gray-500">14/12/2024 02:00:00 - Système</p>
                            </div>
                            <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">Système</span>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end">
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(modalContent);
        }

        function showUserForm(userId = null) {
            const isEdit = userId !== null;
            const user = isEdit ? users.find(u => u.id === userId) : {};

            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">${isEdit ? 'Modifier' : 'Nouvel'} Utilisateur</h3>
                </div>
                <form onsubmit="saveUser(event, ${userId})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nom *</label>
                            <input type="text" name="nom" value="${user.nom || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                            <input type="email" name="email" value="${user.email || ''}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Rôle *</label>
                            <select name="role" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner un rôle</option>
                                <option value="Administrateur" ${user.role === 'Administrateur' ? 'selected' : ''}>Administrateur</option>
                                <option value="Superviseur" ${user.role === 'Superviseur' ? 'selected' : ''}>Superviseur</option>
                                <option value="Agent" ${user.role === 'Agent' ? 'selected' : ''}>Agent</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Zone *</label>
                            <select name="zone" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="">Sélectionner une zone</option>
                                <option value="Toutes" ${user.zone === 'Toutes' ? 'selected' : ''}>Toutes</option>
                                <option value="Nord" ${user.zone === 'Nord' ? 'selected' : ''}>Zone Nord</option>
                                <option value="Sud" ${user.zone === 'Sud' ? 'selected' : ''}>Zone Sud</option>
                                <option value="Est" ${user.zone === 'Est' ? 'selected' : ''}>Zone Est</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                            <select name="statut" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="actif" ${user.statut === 'actif' ? 'selected' : ''}>Actif</option>
                                <option value="inactif" ${user.statut === 'inactif' ? 'selected' : ''}>Inactif</option>
                            </select>
                        </div>
                        ${!isEdit ? `
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Mot de passe *</label>
                            <input type="password" name="password" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        ` : ''}
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-indigo-700">
                            ${isEdit ? 'Modifier' : 'Créer'}
                        </button>
                    </div>
                </form>
            `;

            showModal(modalContent);
        }

        async function saveUser(event, userId) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);

            try {
                if (userId) {
                    // Update existing user
                    const index = users.findIndex(u => u.id === userId);
                    if (index !== -1) {
                        const updatedUser = { ...users[index], ...data };
                        users[index] = updatedUser;
                        
                        await db.update('users', updatedUser);
                        await db.addActivity('user', `Utilisateur modifié - ${data.nom}`, { userId });
                        
                        showToast('Utilisateur modifié avec succès', 'success');
                    }
                } else {
                    // Add new user
                    const newId = users.length > 0 ? Math.max(...users.map(u => u.id || 0)) + 1 : 1;
                    const newUser = {
                        id: newId,
                        statut: 'actif',
                        lastLogin: null,
                        ...data
                    };
                    
                    users.push(newUser);
                    
                    await db.add('users', newUser);
                    await db.addActivity('user', `Nouvel utilisateur - ${data.nom}`, { userId: newId });
                    
                    showToast('Utilisateur créé avec succès', 'success');
                }

                closeModal();
                populateUsersTable();
            } catch (error) {
                console.error('Error saving user:', error);
                showToast('Erreur lors de l\'enregistrement', 'error');
            }
        }

        function editUser(id) {
            showUserForm(id);
        }

        async function deleteUser(id) {
            if (confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
                try {
                    const index = users.findIndex(u => u.id === id);
                    if (index !== -1) {
                        const user = users[index];
                        users.splice(index, 1);
                        
                        await db.delete('users', id);
                        await db.addActivity('user', `Utilisateur supprimé - ${user.nom}`, { userId: id });
                        
                        showToast('Utilisateur supprimé avec succès', 'success');
                        populateUsersTable();
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    showToast('Erreur lors de la suppression', 'error');
                }
            }
        }

        function exportData(type) {
            let data, filename;
            
            switch(type) {
                case 'producers':
                    data = producers;
                    filename = 'producteurs.json';
                    break;
                case 'collections':
                    data = collections;
                    filename = 'collectes.json';
                    break;
                case 'distributions':
                    data = distributions;
                    filename = 'distributions.json';
                    break;
                case 'inventory':
                    data = inventory;
                    filename = 'inventaire.json';
                    break;
                default:
                    return;
            }

            const jsonData = JSON.stringify(data, null, 2);
            const blob = new Blob([jsonData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showToast(`Export ${type} terminé`, 'success');
        }

        // Utility Functions
        function showModal(content) {
            document.getElementById('modalContent').innerHTML = content;
            document.getElementById('modalContainer').classList.remove('hidden');
            lucide.createIcons();
        }

        function closeModal() {
            document.getElementById('modalContainer').classList.add('hidden');
        }

        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toastContainer');
            const toast = document.createElement('div');
            
            const bgColor = type === 'success' ? 'bg-green-500' : type === 'error' ? 'bg-red-500' : 'bg-blue-500';
            
            toast.className = `${bgColor} text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full`;
            toast.innerHTML = `
                <div class="flex items-center">
                    <i data-lucide="${type === 'success' ? 'check-circle' : type === 'error' ? 'x-circle' : 'info'}" class="w-5 h-5 mr-2"></i>
                    <span class="text-sm font-medium">${message}</span>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            lucide.createIcons();
            
            // Animate in
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
            }, 100);
            
            // Remove after 3 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => {
                    if (toastContainer.contains(toast)) {
                        toastContainer.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        function logout() {
            if (confirm('Êtes-vous sûr de vouloir vous déconnecter ?')) {
                showToast('Déconnexion réussie', 'success');
                // In a real app, this would redirect to login page
                setTimeout(() => {
                    location.reload();
                }, 1500);
            }
        }

        // Search and Filter Functions
        function setupSearchAndFilters() {
            // Producer search
            const producerSearch = document.getElementById('producerSearch');
            const zoneFilter = document.getElementById('zoneFilter');
            const statusFilter = document.getElementById('statusFilter');

            if (producerSearch) {
                producerSearch.addEventListener('input', filterProducers);
            }
            if (zoneFilter) {
                zoneFilter.addEventListener('change', filterProducers);
            }
            if (statusFilter) {
                statusFilter.addEventListener('change', filterProducers);
            }
        }

        function filterProducers() {
            const searchTerm = document.getElementById('producerSearch')?.value.toLowerCase() || '';
            const zoneFilter = document.getElementById('zoneFilter')?.value || '';
            const statusFilter = document.getElementById('statusFilter')?.value || '';

            const filteredProducers = producers.filter(producer => {
                const matchesSearch = producer.nom.toLowerCase().includes(searchTerm) || 
                                    producer.prenom.toLowerCase().includes(searchTerm) ||
                                    producer.matricule.toLowerCase().includes(searchTerm);
                const matchesZone = !zoneFilter || producer.zone === zoneFilter;
                const matchesStatus = !statusFilter || producer.statut === statusFilter;

                return matchesSearch && matchesZone && matchesStatus;
            });

            populateFilteredProducersTable(filteredProducers);
        }

        function populateFilteredProducersTable(filteredProducers) {
            const tbody = document.getElementById('producersTableBody');
            tbody.innerHTML = '';

            filteredProducers.forEach(producer => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <div class="text-xs sm:text-sm font-medium text-gray-900">${producer.nom} ${producer.prenom}</div>
                        <div class="text-xs text-gray-500 sm:hidden">${producer.matricule}</div>
                        <div class="text-xs text-gray-500 md:hidden">Zone ${producer.zone.charAt(0).toUpperCase() + producer.zone.slice(1)}</div>
                        <div class="text-xs text-gray-500 lg:hidden">${producer.telephone}</div>
                    </td>
                    <td class="hidden sm:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producer.matricule}</td>
                    <td class="hidden md:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">Zone ${producer.zone.charAt(0).toUpperCase() + producer.zone.slice(1)}</td>
                    <td class="hidden lg:table-cell px-6 py-4 whitespace-nowrap text-sm text-gray-500">${producer.telephone}</td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap">
                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${producer.statut === 'actif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                            ${producer.statut.charAt(0).toUpperCase() + producer.statut.slice(1)}
                        </span>
                    </td>
                    <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium">
                        <button onclick="editProducer(${producer.id})" class="text-indigo-600 hover:text-indigo-900 mr-2 sm:mr-3">Modifier</button>
                        <button onclick="viewProducer(${producer.id})" class="text-green-600 hover:text-green-900">Voir</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        // Additional Warehouse Functions
        function editInventoryItem(id) {
            const item = inventory.find(i => i.id === id);
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Modifier Article</h3>
                </div>
                <form onsubmit="saveInventoryItem(event, ${id})" class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nom de l'article *</label>
                            <input type="text" name="nom" value="${item.nom}" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Catégorie *</label>
                            <select name="categorie" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="Engrais" ${item.categorie === 'Engrais' ? 'selected' : ''}>Engrais</option>
                                <option value="Semences" ${item.categorie === 'Semences' ? 'selected' : ''}>Semences</option>
                                <option value="Pesticides" ${item.categorie === 'Pesticides' ? 'selected' : ''}>Pesticides</option>
                                <option value="Herbicides" ${item.categorie === 'Herbicides' ? 'selected' : ''}>Herbicides</option>
                                <option value="Outils" ${item.categorie === 'Outils' ? 'selected' : ''}>Outils</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Stock Minimum *</label>
                            <input type="number" name="stockMin" value="${item.stockMin}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Prix Unitaire (F) *</label>
                            <input type="number" name="prixUnitaire" value="${item.prixUnitaire}" required min="0" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Unité *</label>
                            <select name="unite" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="kg" ${item.unite === 'kg' ? 'selected' : ''}>kg</option>
                                <option value="L" ${item.unite === 'L' ? 'selected' : ''}>L</option>
                                <option value="unité" ${item.unite === 'unité' ? 'selected' : ''}>unité</option>
                                <option value="sac" ${item.unite === 'sac' ? 'selected' : ''}>sac</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 bg-blue-600 border border-transparent rounded-md text-sm font-medium text-white hover:bg-blue-700">
                            Modifier
                        </button>
                    </div>
                </form>
            `;
            showModal(modalContent);
        }

        async function saveInventoryItem(event, id) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData);
            
            try {
                const index = inventory.findIndex(i => i.id === id);
                if (index === -1) {
                    showToast('Article non trouvé', 'error');
                    return;
                }
                
                const updatedItem = { 
                    ...inventory[index], 
                    ...data,
                    stockMin: parseInt(data.stockMin),
                    prixUnitaire: parseInt(data.prixUnitaire)
                };
                
                inventory[index] = updatedItem;
                
                await db.update('inventory', updatedItem);
                await db.addActivity('inventory', `Article modifié - ${data.nom}`, { itemId: id });
                
                showToast('Article modifié avec succès', 'success');
                closeModal();
                populateInventoryTable();
                await updateDashboardStats();
            } catch (error) {
                console.error('Error saving inventory item:', error);
                showToast('Erreur lors de la modification', 'error');
            }
        }

        function viewPurchase(id) {
            const purchase = purchases.find(p => p.id === id);
            const modalContent = `
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Détails de l'Achat #${String(id).padStart(6, '0')}</h3>
                </div>
                <div class="p-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Date</label>
                            <p class="mt-1 text-sm text-gray-900">${new Date(purchase.date).toLocaleDateString('fr-FR')}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Fournisseur</label>
                            <p class="mt-1 text-sm text-gray-900">${purchase.fournisseur}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Article</label>
                            <p class="mt-1 text-sm text-gray-900">${purchase.article}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Quantité</label>
                            <p class="mt-1 text-sm text-gray-900">${purchase.quantite}</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Prix Unitaire</label>
                            <p class="mt-1 text-sm text-gray-900">${purchase.prixUnitaire.toLocaleString()} F</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Total</label>
                            <p class="mt-1 text-lg font-bold text-gray-900">${purchase.total.toLocaleString()} F</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Statut</label>
                            <span class="mt-1 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${purchase.statut === 'reçu' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                ${purchase.statut === 'reçu' ? 'Reçu' : 'En Transit'}
                            </span>
                        </div>
                    </div>
                    <div class="mt-6 flex justify-end">
                        <button onclick="closeModal()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700">
                            Fermer
                        </button>
                    </div>
                </div>
            `;
            showModal(modalContent);
        }

        function editPurchase(id) {
            showPurchaseForm(id);
        }

        // ===== APPLICATION INITIALIZATION =====
        async function initializeApplication() {
            try {
                // Show loading screen
                document.getElementById('loadingScreen').classList.remove('hidden');
                
                // Initialize database
                db = new SCCKDatabase();
                
                // Wait for database to be ready
                await new Promise(resolve => {
                    const checkDB = () => {
                        if (db.db) {
                            resolve();
                        } else {
                            setTimeout(checkDB, 100);
                        }
                    };
                    checkDB();
                });
                
                // Initialize managers
                authManager = new AuthManager();
                chartManager = new ChartManager();
                
                // Load data from database
                await loadDataFromDatabase();
                
                // Setup event listeners
                setupEventListeners();
                
                // Setup date inputs with default values
                setupDateInputs();
                
                // Check for notifications
                await NotificationManager.checkLowStock();
                await NotificationManager.checkPendingPayments();
                await NotificationManager.checkOverdueDistributions();
                
                // Hide loading screen and show login
                document.getElementById('loadingScreen').classList.add('hidden');
                document.getElementById('loginScreen').classList.remove('hidden');
                
                console.log('Application initialized successfully');
                
            } catch (error) {
                console.error('Application initialization failed:', error);
                showToast('Erreur d\'initialisation de l\'application', 'error');
            }
        }

        async function loadDataFromDatabase() {
            try {
                producers = await db.getAll('producers') || [];
                collections = await db.getAll('collections') || [];
                distributions = await db.getAll('distributions') || [];
                inventory = await db.getAll('inventory') || [];
                purchases = await db.getAll('purchases') || [];
                suppliers = await db.getAll('suppliers') || [];
                users = await db.getAll('users') || [];
                
                console.log('Data loaded from database:', {
                    producers: producers.length,
                    collections: collections.length,
                    distributions: distributions.length,
                    inventory: inventory.length,
                    purchases: purchases.length,
                    suppliers: suppliers.length,
                    users: users.length
                });
            } catch (error) {
                console.error('Failed to load data from database:', error);
                // Initialize with empty arrays if database fails
                producers = [];
                collections = [];
                distributions = [];
                inventory = [];
                purchases = [];
                suppliers = [];
                users = [];
            }
        }

        function setupEventListeners() {
            // Login form
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            
            // Modal close
            document.getElementById('modalContainer').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
            
            // Search and filters
            setupSearchAndFilters();
            
            // Session extension on user activity
            document.addEventListener('click', () => {
                if (authManager && authManager.currentUser) {
                    authManager.extendSession();
                }
            });
            
            // Keyboard shortcuts
            document.addEventListener('keydown', handleKeyboardShortcuts);
        }

        function setupDateInputs() {
            const today = new Date().toISOString().split('T')[0];
            const lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            const lastMonthStr = lastMonth.toISOString().split('T')[0];
            
            // Dashboard date inputs
            const startDateInput = document.getElementById('dashboardStartDate');
            const endDateInput = document.getElementById('dashboardEndDate');
            
            if (startDateInput) startDateInput.value = lastMonthStr;
            if (endDateInput) endDateInput.value = today;
        }

        function handleKeyboardShortcuts(event) {
            if (event.ctrlKey || event.metaKey) {
                switch(event.key) {
                    case '1':
                        event.preventDefault();
                        showModule('dashboard');
                        break;
                    case '2':
                        event.preventDefault();
                        showModule('producers');
                        break;
                    case '3':
                        event.preventDefault();
                        showModule('collection');
                        break;
                    case '4':
                        event.preventDefault();
                        showModule('distribution');
                        break;
                    case '5':
                        event.preventDefault();
                        showModule('warehouse');
                        break;
                    case '6':
                        event.preventDefault();
                        showModule('admin');
                        break;
                    case 's':
                        event.preventDefault();
                        ExportManager.exportDashboard();
                        break;
                }
            }
        }

        async function handleLogin(event) {
            event.preventDefault();
            
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            const rememberMe = document.getElementById('rememberMe').checked;
            
            if (!email || !password) {
                showToast('Veuillez remplir tous les champs', 'error');
                return;
            }
            
            try {
                const result = await authManager.login(email, password);
                
                if (result.success) {
                    // Save credentials if remember me is checked
                    if (rememberMe) {
                        localStorage.setItem('rememberedEmail', email);
                    } else {
                        localStorage.removeItem('rememberedEmail');
                    }
                    
                    // Hide login screen
                    document.getElementById('loginScreen').classList.add('hidden');
                    
                    // Initialize dashboard
                    await initializeDashboard();
                    
                    showToast(`Bienvenue, ${result.user.nom}!`, 'success');
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('Login error:', error);
                showToast('Erreur de connexion', 'error');
            }
        }

        async function initializeDashboard() {
            // Show dashboard module
            showModule('dashboard');
            
            // Initialize charts
            await chartManager.initializeCharts();
            
            // Update dashboard statistics
            await updateDashboardStats();
            
            // Populate recent activities
            await populateRecentActivities();
        }

        async function updateDashboardStats() {
            try {
                // Update KPI cards
                const totalProducers = producers.filter(p => p.statut === 'actif').length;
                const totalCollection = collections.reduce((sum, c) => sum + parseFloat(c.quantite || 0), 0);
                const totalDistributions = distributions.length;
                const totalRevenue = collections.reduce((sum, c) => sum + parseFloat(c.total || 0), 0);
                
                document.getElementById('totalProducers').textContent = totalProducers;
                document.getElementById('totalCollection').textContent = totalCollection.toLocaleString();
                document.getElementById('totalDistributions').textContent = totalDistributions;
                document.getElementById('totalRevenue').textContent = totalRevenue.toLocaleString();
                
                // Update warehouse stats
                const totalItems = inventory.length;
                const monthlyPurchases = purchases.filter(p => {
                    const purchaseDate = new Date(p.date);
                    const currentMonth = new Date().getMonth();
                    return purchaseDate.getMonth() === currentMonth;
                }).length;
                const lowStockItems = inventory.filter(item => item.stockActuel <= item.stockMin).length;
                const stockValue = inventory.reduce((sum, item) => sum + (item.stockActuel * item.prixUnitaire), 0);
                
                const totalItemsEl = document.getElementById('totalItems');
                const monthlyPurchasesEl = document.getElementById('monthlyPurchases');
                const lowStockItemsEl = document.getElementById('lowStockItems');
                const stockValueEl = document.getElementById('stockValue');
                
                if (totalItemsEl) totalItemsEl.textContent = totalItems;
                if (monthlyPurchasesEl) monthlyPurchasesEl.textContent = monthlyPurchases;
                if (lowStockItemsEl) lowStockItemsEl.textContent = lowStockItems;
                if (stockValueEl) stockValueEl.textContent = stockValue.toLocaleString() + ' F';
                
            } catch (error) {
                console.error('Error updating dashboard stats:', error);
            }
        }

        async function populateRecentActivities() {
            try {
                const activities = await db.getAll('activities');
                const recentActivities = activities
                    .sort((a, b) => new Date(b.date) - new Date(a.date))
                    .slice(0, 5);
                
                const container = document.getElementById('recentActivities');
                if (!container) return;
                
                container.innerHTML = '';
                
                recentActivities.forEach(activity => {
                    const activityEl = document.createElement('div');
                    activityEl.className = 'flex items-start sm:items-center space-x-3';
                    
                    const color = getActivityColor(activity.type);
                    const timeAgo = getTimeAgo(activity.date);
                    
                    activityEl.innerHTML = `
                        <div class="w-2 h-2 ${color} rounded-full mt-2 sm:mt-0 flex-shrink-0"></div>
                        <div class="flex-1 min-w-0">
                            <span class="text-xs sm:text-sm text-gray-600 block">${activity.description}</span>
                            <span class="text-xs text-gray-400">${timeAgo}</span>
                        </div>
                    `;
                    
                    container.appendChild(activityEl);
                });
                
            } catch (error) {
                console.error('Error populating recent activities:', error);
            }
        }

        function getActivityColor(type) {
            const colors = {
                login: 'bg-green-500',
                logout: 'bg-gray-500',
                collection: 'bg-blue-500',
                distribution: 'bg-purple-500',
                producer: 'bg-indigo-500',
                purchase: 'bg-orange-500',
                inventory: 'bg-teal-500'
            };
            return colors[type] || 'bg-gray-500';
        }

        function getTimeAgo(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffInMinutes = Math.floor((now - date) / (1000 * 60));
            
            if (diffInMinutes < 1) return 'À l\'instant';
            if (diffInMinutes < 60) return `Il y a ${diffInMinutes}min`;
            
            const diffInHours = Math.floor(diffInMinutes / 60);
            if (diffInHours < 24) return `Il y a ${diffInHours}h`;
            
            const diffInDays = Math.floor(diffInHours / 24);
            if (diffInDays < 7) return `Il y a ${diffInDays} jour${diffInDays > 1 ? 's' : ''}`;
            
            return date.toLocaleDateString('fr-FR');
        }

        // ===== ENHANCED FUNCTIONS =====
        async function refreshDashboard() {
            showToast('Actualisation en cours...', 'info');
            
            try {
                await loadDataFromDatabase();
                await updateDashboardStats();
                await populateRecentActivities();
                await chartManager.updateCharts();
                
                showToast('Tableau de bord actualisé', 'success');
            } catch (error) {
                console.error('Error refreshing dashboard:', error);
                showToast('Erreur lors de l\'actualisation', 'error');
            }
        }

        async function exportDashboard() {
            await ExportManager.exportDashboard();
        }

        async function updateDashboardPeriod() {
            const startDate = document.getElementById('dashboardStartDate').value;
            const endDate = document.getElementById('dashboardEndDate').value;
            
            if (!startDate || !endDate) {
                showToast('Veuillez sélectionner une période valide', 'error');
                return;
            }
            
            if (new Date(startDate) > new Date(endDate)) {
                showToast('La date de début doit être antérieure à la date de fin', 'error');
                return;
            }
            
            // Filter data by date range and update charts
            await chartManager.updateCharts();
            showToast('Période mise à jour', 'success');
        }

        // Initialize application when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize icons
            lucide.createIcons();
            
            // Check for remembered email
            const rememberedEmail = localStorage.getItem('rememberedEmail');
            if (rememberedEmail) {
                document.getElementById('loginEmail').value = rememberedEmail;
                document.getElementById('rememberMe').checked = true;
            }
            
            // Initialize application
            initializeApplication();
        });
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97dcf1b5259fc369',t:'MTc1NzY1NDMwNi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script>